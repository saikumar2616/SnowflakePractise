-- ðŸ¥‹ OpenStreetMap - Super Charged!
-- Did you notice that both WKT Playground and the GeoJSON.io site use OpenStreetMap to display the data? OpenStreetMap is an open source alternative to Google Maps that can be very handy for getting geospatial data displayed.
-- Klaus tells him that Open Street Map data is probably already available on the Snowflake Data Marketplace and encourages Mel to check out a company called Sonra that enhances Open Street Map data, and makes it available on the Marketplace. 
-- Get the openstreetmap denver data from marketplace from sonra provider

-- ðŸ¥‹ Give SYSADMIN Access to the Sonra OSM Denver Data
ALTER DATABASE OPENSTREETMAP_DENVER RENAME TO SONRA_DENVER_CO_USA_FREE;


-- ðŸ““  Learn More About Sonra's Denver Open Street Map (OSM) Data

-- ðŸ““ Let's Choose a Location for Melanie's CafÃ©
-- GOOGLE MAPS: 39.76471253574085, -104.97300245114094

-- WKT PLAYGROUND: POINT(-104.9730024511  39.76471253574)

-- GEOJSON.IO: Paste between the square brackets. 

{
      "type": "Feature",
     "properties": {
        "marker-color": "#ee9bdc",
       "marker-size": "medium",
        "marker-symbol": "cafe",
        "name": "Melanie's Cafe"
     },
     "geometry": {
        "type": "Point",
       "coordinates": [
          -104.97300870716572,
          39.76469906695095
        ]
      }
    }


-- ðŸ¥‹ Using Variables in Snowflake Worksheets 
-- Melanie's Location into a 2 Variables (mc for melanies cafe)
set mc_lat='-104.97300245114094';
set mc_lng='39.76471253574085';

--Confluence Park into a Variable (loc for location)
set loc_lat='-105.00840763333615'; 
set loc_lng='39.754141917497826';

--Test your variables to see if they work with the Makepoint function
select st_makepoint($mc_lat,$mc_lng) as melanies_cafe_point;
select st_makepoint($loc_lat,$loc_lng) as confluent_park_point;

--use the variables to calculate the distance from 
--Melanie's Cafe to Confluent Park
select st_distance(
        st_makepoint($mc_lat,$mc_lng)
        ,st_makepoint($loc_lat,$loc_lng)
        ) as mc_to_cp;


-- ðŸ““ Variables are Cool, But Constants Aren't So Bad!
    -- $mc_lat,$mc_lng are variables


-- ðŸ““ Let's Create a UDF for Measuring Distance from Melanie's CafÃ©
create schema MELS_SMOOTHIE_CHALLENGE_DB.LOCATIONS;

CREATE FUNCTION distance_to_mc(loc_lat number(38,32), loc_lng number(38,32))
  RETURNS FLOAT
  AS
  $$
    <our function code will be here>
  $$
  ;

-- ðŸ¥‹ Filling in the Function Code
CREATE OR REPLACE FUNCTION distance_to_mc(loc_lat number(38,32), loc_lng number(38,32))
  RETURNS FLOAT
  AS
  $$
   st_distance(
        st_makepoint('-104.97300245114094','39.76471253574085')
        ,st_makepoint(loc_lat,loc_lng)
        )
  $$
  ;

-- ðŸ¥‹ Test the New Function!
--Tivoli Center into the variables 
set tc_lat='-105.00532059763648'; 
set tc_lng='39.74548137398218';

select distance_to_mc($tc_lat,$tc_lng);



-- ðŸ¥‹ Create a List of Competing Juice Bars in the Area
select * 
from SONRA_DENVER_CO_USA_FREE.DENVER.V_OSM_DEN_AMENITY_SUSTENANCE
where 
    ((amenity in ('fast_food','cafe','restaurant','juice_bar'))
    and 
    (name ilike '%jamba%' or name ilike '%juice%'
     or name ilike '%superfruit%'))
 or 
    (cuisine like '%smoothie%' or cuisine like '%juice%');


-- ðŸŽ¯ Convert the List into a View
create view  MELS_SMOOTHIE_CHALLENGE_DB.LOCATIONS.COMPETITION as
select * 
from SONRA_DENVER_CO_USA_FREE.DENVER.V_OSM_DEN_AMENITY_SUSTENANCE
where 
    ((amenity in ('fast_food','cafe','restaurant','juice_bar'))
    and 
    (name ilike '%jamba%' or name ilike '%juice%'
     or name ilike '%superfruit%'))
 or 
    (cuisine like '%smoothie%' or cuisine like '%juice%');


-- ðŸ¥‹ Which Competitor is Closest to Melanie's?
SELECT
 name
 ,cuisine
 , ST_DISTANCE(
    st_makepoint('-104.97300245114094','39.76471253574085')
    , coordinates
  ) AS distance_from_melanies
 ,*
FROM  competition
ORDER by distance_from_melanies;


-- ðŸ““ Why Not Use the UDF We Just Created? 
    -- Since the Sonra data is not separated into Latitude and Longitude, it would be hard to use our function. Our function expects the two coordinates to be passed in separately, and the Sonra data has each point stored as full geoJSON GEOGRAPHY objects in the COORDINATES column. 
    
    -- We could try to parse the COORDINATES column back into Latitude and Longitude numbers. If we did that, we could pass them into our UDF where the UDF would to reassemble them back into a POINT again. That would work. But there's a better way!
    
    -- We need a function that can accept the Sonra GEOGRAPHY object instead of two numbers. 



    
-- ðŸ¥‹ Changing the Function to Accept a GEOGRAPHY Argument 
-- We've highlighted the changed parts in blue. observe the changes from previous function declaration
CREATE OR REPLACE FUNCTION distance_to_mc(lat_and_lng GEOGRAPHY)    ---change in the line from previous declaration
  RETURNS FLOAT
  AS
  $$
   st_distance(
        st_makepoint('-104.97300245114094','39.76471253574085')
        ,lat_and_lng    ---change in the line from previous declaration
        )
  $$
  ;



-- ðŸ¥‹ Now We Can Use it In Our Sonra Select
SELECT
 name
 ,cuisine
 ,distance_to_mc(coordinates) AS distance_from_melanies
 ,*
FROM  competition
ORDER by distance_from_melanies;




-- ðŸ““ What the Heck is Going On? 
-- First we had a function called DISTANCE_TO_MC and it had two arguments. Then, we ran a CREATE OR REPLACE statement that defined the DISTANCE_TO_MC UDF so that it had just one argument. Maybe you expected only one function called DISTANCE_TO_MC would exist after that. But you look in your LOCATIONS Schema under FUNCTIONS and you find that there are two!
-- If you are new to coding, you may not know about something called "overloading" a function. Overloading sounds like a bad thing, but it's actually pretty cool. 

-- Basically, it means that you can have different ways of running the same function and Snowflake will figure out which way to run the UDF, based on what you send it. So if you send the UDF two numbers it will run our first version of the function and if you pass it one geography point, it will run the second version.

-- This means we can run the function several different ways and they will all result in the same answer.  When speaking about a FUNCTION plus its ARGUMENTS we can refer to it as the FUNCTION SIGNATURE. 


-- ðŸ¥‹ Different Options, Same Outcome!
-- Tattered Cover Bookstore McGregor Square
set tcb_lat='-104.9956203'; 
set tcb_lng='39.754874';

--this will run the first version of the UDF
select distance_to_mc($tcb_lat,$tcb_lng);

--this will run the second version of the UDF, bc it converts the coords 
--to a geography object before passing them into the function
select distance_to_mc(st_makepoint($tcb_lat,$tcb_lng));

--this will run the second version bc the Sonra Coordinates column
-- contains geography objects already
select name
, distance_to_mc(coordinates) as distance_to_melanies 
, ST_ASWKT(coordinates)
from SONRA_DENVER_CO_USA_FREE.DENVER.V_OSM_DEN_SHOP
where shop='books' 
and name like '%Tattered Cover%'
and addr_street like '%Wazee%';



-- ðŸŽ¯ Create a View of Bike Shops in the Denver Data
select  shop, name, coordinates from SONRA_DENVER_CO_USA_FREE.DENVER.V_OSM_DEN_SHOP where shop like '%bicycle%';

select shop, name, coordinates from SONRA_DENVER_CO_USA_FREE.DENVER.V_OSM_DEN_SHOP_OUTDOORS_AND_SPORT_VEHICLES  where shop like '%bicycle%';


create or replace view DENVER_BIKE_SHOPS as 
select 
name , coordinates,
distance_to_mc(coordinates) as DISTANCE_TO_MELANIES 
from SONRA_DENVER_CO_USA_FREE.DENVER.V_OSM_DEN_SHOP
where shop like '%bicycle%'
order by DISTANCE_TO_MELANIES asc;


-- ðŸŽ¯ Which Promo Partner is Closest to Melanie's?
