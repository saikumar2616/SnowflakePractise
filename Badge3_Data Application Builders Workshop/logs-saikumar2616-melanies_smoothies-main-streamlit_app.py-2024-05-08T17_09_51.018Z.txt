
[     UTC     ] Logs for melanies-smoothies-2616.streamlit.app/
────────────────────────────────────────────────────────────────────────────────────────
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:01:31.547 503 GET /script-health-check (10.12.76.29) 110.70ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:01:36.611 503 GET /script-health-check (10.12.76.29) 113.94ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:01:43.738 503 GET /script-health-check (10.12.76.29) 2224.79ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:01:46.595 503 GET /script-health-check (10.12.76.29) 115.46ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:01:51.538 503 GET /script-health-check (10.12.76.29) 114.30ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:01:56.536 503 GET /script-health-check (10.12.76.29) 114.08ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:02:02.938 503 GET /script-health-check (10.12.76.29) 1414.69ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:02:06.552 503 GET /script-health-check (10.12.76.29) 110.92ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:02:11.538 503 GET /script-health-check (10.12.76.29) 114.39ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:02:18.073 503 GET /script-health-check (10.12.76.29) 1633.69ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:02:21.610 503 GET /script-health-check (10.12.76.29) 108.68ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:02:26.614 503 GET /script-health-check (10.12.76.29) 114.20ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:02:31.526 503 GET /script-health-check (10.12.76.29) 113.59ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:02:37.019 503 GET /script-health-check (10.12.76.29) 514.54ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:02:41.504 503 GET /script-health-check (10.12.76.29) 114.57ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:02:46.493 503 GET /script-health-check (10.12.76.29) 18.33ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:02:51.552 503 GET /script-health-check (10.12.76.29) 109.34ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:02:56.889 503 GET /script-health-check (10.12.76.29) 412.81ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:03:01.561 503 GET /script-health-check (10.12.76.29) 114.64ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:03:06.547 503 GET /script-health-check (10.12.76.29) 108.30ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:03:12.264 503 GET /script-health-check (10.12.76.29) 818.39ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:03:16.585 503 GET /script-health-check (10.12.76.29) 114.39ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:03:21.534 503 GET /script-health-check (10.12.76.29) 114.73ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:03:26.572 503 GET /script-health-check (10.12.76.29) 115.19ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:03:32.023 503 GET /script-health-check (10.12.76.29) 615.45ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:03:36.571 503 GET /script-health-check (10.12.76.29) 114.15ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:03:41.625 503 GET /script-health-check (10.12.76.29) 113.92ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:03:46.559 503 GET /script-health-check (10.12.76.29) 114.61ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:03:52.045 503 GET /script-health-check (10.12.76.29) 612.53ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:03:56.543 503 GET /script-health-check (10.12.76.29) 113.41ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:04:01.534 503 GET /script-health-check (10.12.76.29) 114.88ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
2024-05-08 16:04:07.077 503 GET /script-health-check (10.12.76.29) 617.72ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:103 in _connect                                           
                                                                                
    100 │   │   │   │   │   if self._connection_name == "snowflake"             
    101 │   │   │   │   │   else self._connection_name                          
    102 │   │   │   │   )                                                       
  ❱ 103 │   │   │   │   return snowflake.connector.connect(                     
    104 │   │   │   │   │   connection_name=connection_name,                    
    105 │   │   │   │   │   **kwargs,                                           
    106 │   │   │   │   )                                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:433 in __init__                                                       
                                                                                
     430 │   │   if connection_name is not None:                                
     431 │   │   │   connections = CONFIG_MANAGER["connections"]                
     432 │   │   │   if connection_name not in connections:                     
  ❱  433 │   │   │   │   raise Error(                                           
     434 │   │   │   │   │   f"Invalid connection_name '{connection_name}',"    
     435 │   │   │   │   │   f" known ones are {list(connections.keys())}"      
     436 │   │   │   │   )                                                      
────────────────────────────────────────────────────────────────────────────────
Error: Invalid connection_name 'default', known ones are []

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:111 in _connect                                           
                                                                                
    108 │   │   │   return snowflake.connector.connect(**kwargs)                
    109 │   │   except SnowflakeError as e:                                     
    110 │   │   │   if not len(st_secrets) and not len(kwargs):                 
  ❱ 111 │   │   │   │   raise StreamlitAPIException(                            
    112 │   │   │   │   │   "Missing Snowflake connection configuration. "      
    113 │   │   │   │   │   "Did you forget to set this in `secrets.toml`, a S  
    114 │   │   │   │   │   "or as kwargs to `st.connection`? "                 
────────────────────────────────────────────────────────────────────────────────
StreamlitAPIException: Missing Snowflake connection configuration. Did you 
forget to set this in `secrets.toml`, a Snowflake configuration file, or as 
kwargs to `st.connection`? See the [SnowflakeConnection configuration 
documentation](https://docs.streamlit.io/st.connections.snowflakeconnection-conf
iguration) for more details and examples.
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:250 in authenticate                                                   
                                                                                
    247 │   │   )                                                               
    248 │   │                                                                   
    249 │   │   try:                                                            
  ❱ 250 │   │   │   ret = self._rest._post_request(                             
    251 │   │   │   │   url,                                                    
    252 │   │   │   │   headers,                                                
    253 │   │   │   │   json.dumps(body),                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:734 in _post_request                                                     
                                                                                
     731 │   │   │   ret = probe_connection(full_url)                           
     732 │   │   │   pprint(ret)                                                
     733 │   │                                                                  
  ❱  734 │   │   ret = self.fetch(                                              
     735 │   │   │   "post",                                                    
     736 │   │   │   full_url,                                                  
     737 │   │   │   headers,                                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:843 in fetch                                                             
                                                                                
     840 │   │   │                                                              
     841 │   │   │   retry_ctx.set_start_time()                                 
     842 │   │   │   while True:                                                
  ❱  843 │   │   │   │   ret = self._request_exec_wrapper(                      
     844 │   │   │   │   │   session, method, full_url, headers, data, retry_c  
     845 │   │   │   │   )                                                      
     846 │   │   │   │   if ret is not None:                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:979 in _request_exec_wrapper                                             
                                                                                
     976 │   │   │   return None  # retry                                       
     977 │   │   except Exception as e:                                         
     978 │   │   │   if not no_retry:                                           
  ❱  979 │   │   │   │   raise e                                                
     980 │   │   │   logger.debug("Ignored error", exc_info=True)               
     981 │   │   │   return {}                                                  
     982                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:884 in _request_exec_wrapper                                             
                                                                                
     881 │   │   full_url = retry_ctx.add_retry_params(full_url)                
     882 │   │   full_url = SnowflakeRestful.add_request_guid(full_url)         
     883 │   │   try:                                                           
  ❱  884 │   │   │   return_object = self._request_exec(                        
     885 │   │   │   │   session=session,                                       
     886 │   │   │   │   method=method,                                         
     887 │   │   │   │   full_url=full_url,                                     
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1193 in _request_exec                                                    
                                                                                
    1190 │   │   │   │   exception=err,                                         
    1191 │   │   │   │   stack_trace=traceback.format_exc(),                    
    1192 │   │   │   )                                                          
  ❱ 1193 │   │   │   raise err                                                  
    1194 │                                                                      
    1195 │   def make_requests_session(self) -> Session:                        
    1196 │   │   s = requests.Session()                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1104 in _request_exec                                                    
                                                                                
    1101 │   │   │   │   │   return ret                                         
    1102 │   │   │   │                                                          
    1103 │   │   │   │   if is_login_request(full_url) and raw_ret.status_code  
  ❱ 1104 │   │   │   │   │   raise ForbiddenError                               
    1105 │   │   │   │                                                          
    1106 │   │   │   │   elif is_retryable_http_code(raw_ret.status_code):      
    1107 │   │   │   │   │   err = get_http_retryable_error(raw_ret.status_cod  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: HTTP 403: Forbidden

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:118 in _connect                                           
                                                                                
    115 │   │   │   │   │   "See the [SnowflakeConnection configuration docume  
    116 │   │   │   │   │   "for more details and examples."                    
    117 │   │   │   │   )                                                       
  ❱ 118 │   │   │   raise e                                                     
    119 │                                                                       
    120 │   def query(                                                          
    121 │   │   self,                                                           
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:82 in _connect                                            
                                                                                
     79 │   │   │   st_secrets = self._secrets.to_dict()                        
     80 │   │   │   if len(st_secrets):                                         
     81 │   │   │   │   conn_kwargs = {**st_secrets, **kwargs}                  
  ❱  82 │   │   │   │   return snowflake.connector.connect(**conn_kwargs)       
     83 │   │   │                                                               
     84 │   │   │   # session.connector.connection.CONFIG_MANAGER is only avai  
     85 │   │   │   # versions of snowflake-connector-python.                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:442 in __init__                                                       
                                                                                
     439 │   │   │   # connection_name is None and kwargs was empty when calle  
     440 │   │   │   kwargs = _get_default_connection_params()                  
     441 │   │   self.__set_error_attributes()                                  
  ❱  442 │   │   self.connect(**kwargs)                                         
     443 │   │   self._telemetry = TelemetryClient(self._rest)                  
     444 │   │   self.expired = False                                           
     445                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:745 in connect                                                        
                                                                                
     742 │   │   │   │   if exceptions_dict:                                    
     743 │   │   │   │   │   raise Exception(str(exceptions_dict))              
     744 │   │   else:                                                          
  ❱  745 │   │   │   self.__open_connection()                                   
     746 │                                                                      
     747 │   def close(self, retry: bool = True) -> None:                       
     748 │   │   """Closes the connection."""                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1073 in __open_connection                                             
                                                                                
    1070 │   │   │   │   │   backoff_generator=self._backoff_generator,         
    1071 │   │   │   │   )                                                      
    1072 │   │   │                                                              
  ❱ 1073 │   │   │   self.authenticate_with_retry(self.auth_class)              
    1074 │   │   │                                                              
    1075 │   │   │   self._password = None  # ensure password won't persist     
    1076 │   │   │   self.auth_class.reset_secrets()                            
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1345 in authenticate_with_retry                                       
                                                                                
    1342 │   def authenticate_with_retry(self, auth_instance) -> None:          
    1343 │   │   # make some changes if needed before real __authenticate       
    1344 │   │   try:                                                           
  ❱ 1345 │   │   │   self._authenticate(auth_instance)                          
    1346 │   │   except ReauthenticationRequest as ex:                          
    1347 │   │   │   # cached id_token expiration error, we have cleaned id_to  
    1348 │   │   │   logger.debug("ID token expired. Reauthenticating...: %s",  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1373 in _authenticate                                                 
                                                                                
    1370 │   │   # record start time for computing timeout                      
    1371 │   │   auth_instance._retry_ctx.set_start_time()                      
    1372 │   │   try:                                                           
  ❱ 1373 │   │   │   auth.authenticate(                                         
    1374 │   │   │   │   auth_instance=auth_instance,                           
    1375 │   │   │   │   account=self.account,                                  
    1376 │   │   │   │   user=self.user,                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:258 in authenticate                                                   
                                                                                
    255 │   │   │   )                                                           
    256 │   │   except ForbiddenError as err:                                   
    257 │   │   │   # HTTP 403                                                  
  ❱ 258 │   │   │   raise err.__class__(                                        
    259 │   │   │   │   msg=(                                                   
    260 │   │   │   │   │   "Failed to connect to DB. "                         
    261 │   │   │   │   │   "Verify the account name is correct: {host}:{port}  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: 250001 (08001): Failed to connect to DB. Verify the account name
is correct: xxx.snowflakecomputing.com:443. HTTP 403: Forbidden
2024-05-08 16:04:11.701 503 GET /script-health-check (10.12.76.29) 214.59ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:250 in authenticate                                                   
                                                                                
    247 │   │   )                                                               
    248 │   │                                                                   
    249 │   │   try:                                                            
  ❱ 250 │   │   │   ret = self._rest._post_request(                             
    251 │   │   │   │   url,                                                    
    252 │   │   │   │   headers,                                                
    253 │   │   │   │   json.dumps(body),                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:734 in _post_request                                                     
                                                                                
     731 │   │   │   ret = probe_connection(full_url)                           
     732 │   │   │   pprint(ret)                                                
     733 │   │                                                                  
  ❱  734 │   │   ret = self.fetch(                                              
     735 │   │   │   "post",                                                    
     736 │   │   │   full_url,                                                  
     737 │   │   │   headers,                                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:843 in fetch                                                             
                                                                                
     840 │   │   │                                                              
     841 │   │   │   retry_ctx.set_start_time()                                 
     842 │   │   │   while True:                                                
  ❱  843 │   │   │   │   ret = self._request_exec_wrapper(                      
     844 │   │   │   │   │   session, method, full_url, headers, data, retry_c  
     845 │   │   │   │   )                                                      
     846 │   │   │   │   if ret is not None:                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:979 in _request_exec_wrapper                                             
                                                                                
     976 │   │   │   return None  # retry                                       
     977 │   │   except Exception as e:                                         
     978 │   │   │   if not no_retry:                                           
  ❱  979 │   │   │   │   raise e                                                
     980 │   │   │   logger.debug("Ignored error", exc_info=True)               
     981 │   │   │   return {}                                                  
     982                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:884 in _request_exec_wrapper                                             
                                                                                
     881 │   │   full_url = retry_ctx.add_retry_params(full_url)                
     882 │   │   full_url = SnowflakeRestful.add_request_guid(full_url)         
     883 │   │   try:                                                           
  ❱  884 │   │   │   return_object = self._request_exec(                        
     885 │   │   │   │   session=session,                                       
     886 │   │   │   │   method=method,                                         
     887 │   │   │   │   full_url=full_url,                                     
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1193 in _request_exec                                                    
                                                                                
    1190 │   │   │   │   exception=err,                                         
    1191 │   │   │   │   stack_trace=traceback.format_exc(),                    
    1192 │   │   │   )                                                          
  ❱ 1193 │   │   │   raise err                                                  
    1194 │                                                                      
    1195 │   def make_requests_session(self) -> Session:                        
    1196 │   │   s = requests.Session()                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1104 in _request_exec                                                    
                                                                                
    1101 │   │   │   │   │   return ret                                         
    1102 │   │   │   │                                                          
    1103 │   │   │   │   if is_login_request(full_url) and raw_ret.status_code  
  ❱ 1104 │   │   │   │   │   raise ForbiddenError                               
    1105 │   │   │   │                                                          
    1106 │   │   │   │   elif is_retryable_http_code(raw_ret.status_code):      
    1107 │   │   │   │   │   err = get_http_retryable_error(raw_ret.status_cod  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: HTTP 403: Forbidden

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:118 in _connect                                           
                                                                                
    115 │   │   │   │   │   "See the [SnowflakeConnection configuration docume  
    116 │   │   │   │   │   "for more details and examples."                    
    117 │   │   │   │   )                                                       
  ❱ 118 │   │   │   raise e                                                     
    119 │                                                                       
    120 │   def query(                                                          
    121 │   │   self,                                                           
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:82 in _connect                                            
                                                                                
     79 │   │   │   st_secrets = self._secrets.to_dict()                        
     80 │   │   │   if len(st_secrets):                                         
     81 │   │   │   │   conn_kwargs = {**st_secrets, **kwargs}                  
  ❱  82 │   │   │   │   return snowflake.connector.connect(**conn_kwargs)       
     83 │   │   │                                                               
     84 │   │   │   # session.connector.connection.CONFIG_MANAGER is only avai  
     85 │   │   │   # versions of snowflake-connector-python.                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:442 in __init__                                                       
                                                                                
     439 │   │   │   # connection_name is None and kwargs was empty when calle  
     440 │   │   │   kwargs = _get_default_connection_params()                  
     441 │   │   self.__set_error_attributes()                                  
  ❱  442 │   │   self.connect(**kwargs)                                         
     443 │   │   self._telemetry = TelemetryClient(self._rest)                  
     444 │   │   self.expired = False                                           
     445                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:745 in connect                                                        
                                                                                
     742 │   │   │   │   if exceptions_dict:                                    
     743 │   │   │   │   │   raise Exception(str(exceptions_dict))              
     744 │   │   else:                                                          
  ❱  745 │   │   │   self.__open_connection()                                   
     746 │                                                                      
     747 │   def close(self, retry: bool = True) -> None:                       
     748 │   │   """Closes the connection."""                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1073 in __open_connection                                             
                                                                                
    1070 │   │   │   │   │   backoff_generator=self._backoff_generator,         
    1071 │   │   │   │   )                                                      
    1072 │   │   │                                                              
  ❱ 1073 │   │   │   self.authenticate_with_retry(self.auth_class)              
    1074 │   │   │                                                              
    1075 │   │   │   self._password = None  # ensure password won't persist     
    1076 │   │   │   self.auth_class.reset_secrets()                            
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1345 in authenticate_with_retry                                       
                                                                                
    1342 │   def authenticate_with_retry(self, auth_instance) -> None:          
    1343 │   │   # make some changes if needed before real __authenticate       
    1344 │   │   try:                                                           
  ❱ 1345 │   │   │   self._authenticate(auth_instance)                          
    1346 │   │   except ReauthenticationRequest as ex:                          
    1347 │   │   │   # cached id_token expiration error, we have cleaned id_to  
    1348 │   │   │   logger.debug("ID token expired. Reauthenticating...: %s",  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1373 in _authenticate                                                 
                                                                                
    1370 │   │   # record start time for computing timeout                      
    1371 │   │   auth_instance._retry_ctx.set_start_time()                      
    1372 │   │   try:                                                           
  ❱ 1373 │   │   │   auth.authenticate(                                         
    1374 │   │   │   │   auth_instance=auth_instance,                           
    1375 │   │   │   │   account=self.account,                                  
    1376 │   │   │   │   user=self.user,                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:258 in authenticate                                                   
                                                                                
    255 │   │   │   )                                                           
    256 │   │   except ForbiddenError as err:                                   
    257 │   │   │   # HTTP 403                                                  
  ❱ 258 │   │   │   raise err.__class__(                                        
    259 │   │   │   │   msg=(                                                   
    260 │   │   │   │   │   "Failed to connect to DB. "                         
    261 │   │   │   │   │   "Verify the account name is correct: {host}:{port}  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: 250001 (08001): Failed to connect to DB. Verify the account name
is correct: xxx.snowflakecomputing.com:443. HTTP 403: Forbidden
2024-05-08 16:04:16.587 503 GET /script-health-check (10.12.76.29) 113.92ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:250 in authenticate                                                   
                                                                                
    247 │   │   )                                                               
    248 │   │                                                                   
    249 │   │   try:                                                            
  ❱ 250 │   │   │   ret = self._rest._post_request(                             
    251 │   │   │   │   url,                                                    
    252 │   │   │   │   headers,                                                
    253 │   │   │   │   json.dumps(body),                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:734 in _post_request                                                     
                                                                                
     731 │   │   │   ret = probe_connection(full_url)                           
     732 │   │   │   pprint(ret)                                                
     733 │   │                                                                  
  ❱  734 │   │   ret = self.fetch(                                              
     735 │   │   │   "post",                                                    
     736 │   │   │   full_url,                                                  
     737 │   │   │   headers,                                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:843 in fetch                                                             
                                                                                
     840 │   │   │                                                              
     841 │   │   │   retry_ctx.set_start_time()                                 
     842 │   │   │   while True:                                                
  ❱  843 │   │   │   │   ret = self._request_exec_wrapper(                      
     844 │   │   │   │   │   session, method, full_url, headers, data, retry_c  
     845 │   │   │   │   )                                                      
     846 │   │   │   │   if ret is not None:                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:979 in _request_exec_wrapper                                             
                                                                                
     976 │   │   │   return None  # retry                                       
     977 │   │   except Exception as e:                                         
     978 │   │   │   if not no_retry:                                           
  ❱  979 │   │   │   │   raise e                                                
     980 │   │   │   logger.debug("Ignored error", exc_info=True)               
     981 │   │   │   return {}                                                  
     982                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:884 in _request_exec_wrapper                                             
                                                                                
     881 │   │   full_url = retry_ctx.add_retry_params(full_url)                
     882 │   │   full_url = SnowflakeRestful.add_request_guid(full_url)         
     883 │   │   try:                                                           
  ❱  884 │   │   │   return_object = self._request_exec(                        
     885 │   │   │   │   session=session,                                       
     886 │   │   │   │   method=method,                                         
     887 │   │   │   │   full_url=full_url,                                     
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1193 in _request_exec                                                    
                                                                                
    1190 │   │   │   │   exception=err,                                         
    1191 │   │   │   │   stack_trace=traceback.format_exc(),                    
    1192 │   │   │   )                                                          
  ❱ 1193 │   │   │   raise err                                                  
    1194 │                                                                      
    1195 │   def make_requests_session(self) -> Session:                        
    1196 │   │   s = requests.Session()                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1104 in _request_exec                                                    
                                                                                
    1101 │   │   │   │   │   return ret                                         
    1102 │   │   │   │                                                          
    1103 │   │   │   │   if is_login_request(full_url) and raw_ret.status_code  
  ❱ 1104 │   │   │   │   │   raise ForbiddenError                               
    1105 │   │   │   │                                                          
    1106 │   │   │   │   elif is_retryable_http_code(raw_ret.status_code):      
    1107 │   │   │   │   │   err = get_http_retryable_error(raw_ret.status_cod  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: HTTP 403: Forbidden

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:118 in _connect                                           
                                                                                
    115 │   │   │   │   │   "See the [SnowflakeConnection configuration docume  
    116 │   │   │   │   │   "for more details and examples."                    
    117 │   │   │   │   )                                                       
  ❱ 118 │   │   │   raise e                                                     
    119 │                                                                       
    120 │   def query(                                                          
    121 │   │   self,                                                           
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:82 in _connect                                            
                                                                                
     79 │   │   │   st_secrets = self._secrets.to_dict()                        
     80 │   │   │   if len(st_secrets):                                         
     81 │   │   │   │   conn_kwargs = {**st_secrets, **kwargs}                  
  ❱  82 │   │   │   │   return snowflake.connector.connect(**conn_kwargs)       
     83 │   │   │                                                               
     84 │   │   │   # session.connector.connection.CONFIG_MANAGER is only avai  
     85 │   │   │   # versions of snowflake-connector-python.                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:442 in __init__                                                       
                                                                                
     439 │   │   │   # connection_name is None and kwargs was empty when calle  
     440 │   │   │   kwargs = _get_default_connection_params()                  
     441 │   │   self.__set_error_attributes()                                  
  ❱  442 │   │   self.connect(**kwargs)                                         
     443 │   │   self._telemetry = TelemetryClient(self._rest)                  
     444 │   │   self.expired = False                                           
     445                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:745 in connect                                                        
                                                                                
     742 │   │   │   │   if exceptions_dict:                                    
     743 │   │   │   │   │   raise Exception(str(exceptions_dict))              
     744 │   │   else:                                                          
  ❱  745 │   │   │   self.__open_connection()                                   
     746 │                                                                      
     747 │   def close(self, retry: bool = True) -> None:                       
     748 │   │   """Closes the connection."""                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1073 in __open_connection                                             
                                                                                
    1070 │   │   │   │   │   backoff_generator=self._backoff_generator,         
    1071 │   │   │   │   )                                                      
    1072 │   │   │                                                              
  ❱ 1073 │   │   │   self.authenticate_with_retry(self.auth_class)              
    1074 │   │   │                                                              
    1075 │   │   │   self._password = None  # ensure password won't persist     
    1076 │   │   │   self.auth_class.reset_secrets()                            
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1345 in authenticate_with_retry                                       
                                                                                
    1342 │   def authenticate_with_retry(self, auth_instance) -> None:          
    1343 │   │   # make some changes if needed before real __authenticate       
    1344 │   │   try:                                                           
  ❱ 1345 │   │   │   self._authenticate(auth_instance)                          
    1346 │   │   except ReauthenticationRequest as ex:                          
    1347 │   │   │   # cached id_token expiration error, we have cleaned id_to  
    1348 │   │   │   logger.debug("ID token expired. Reauthenticating...: %s",  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1373 in _authenticate                                                 
                                                                                
    1370 │   │   # record start time for computing timeout                      
    1371 │   │   auth_instance._retry_ctx.set_start_time()                      
    1372 │   │   try:                                                           
  ❱ 1373 │   │   │   auth.authenticate(                                         
    1374 │   │   │   │   auth_instance=auth_instance,                           
    1375 │   │   │   │   account=self.account,                                  
    1376 │   │   │   │   user=self.user,                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:258 in authenticate                                                   
                                                                                
    255 │   │   │   )                                                           
    256 │   │   except ForbiddenError as err:                                   
    257 │   │   │   # HTTP 403                                                  
  ❱ 258 │   │   │   raise err.__class__(                                        
    259 │   │   │   │   msg=(                                                   
    260 │   │   │   │   │   "Failed to connect to DB. "                         
    261 │   │   │   │   │   "Verify the account name is correct: {host}:{port}  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: 250001 (08001): Failed to connect to DB. Verify the account name
is correct: xxx.snowflakecomputing.com:443. HTTP 403: Forbidden
2024-05-08 16:04:23.944 503 GET /script-health-check (10.12.76.29) 2524.70ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:250 in authenticate                                                   
                                                                                
    247 │   │   )                                                               
    248 │   │                                                                   
    249 │   │   try:                                                            
  ❱ 250 │   │   │   ret = self._rest._post_request(                             
    251 │   │   │   │   url,                                                    
    252 │   │   │   │   headers,                                                
    253 │   │   │   │   json.dumps(body),                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:734 in _post_request                                                     
                                                                                
     731 │   │   │   ret = probe_connection(full_url)                           
     732 │   │   │   pprint(ret)                                                
     733 │   │                                                                  
  ❱  734 │   │   ret = self.fetch(                                              
     735 │   │   │   "post",                                                    
     736 │   │   │   full_url,                                                  
     737 │   │   │   headers,                                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:843 in fetch                                                             
                                                                                
     840 │   │   │                                                              
     841 │   │   │   retry_ctx.set_start_time()                                 
     842 │   │   │   while True:                                                
  ❱  843 │   │   │   │   ret = self._request_exec_wrapper(                      
     844 │   │   │   │   │   session, method, full_url, headers, data, retry_c  
     845 │   │   │   │   )                                                      
     846 │   │   │   │   if ret is not None:                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:979 in _request_exec_wrapper                                             
                                                                                
     976 │   │   │   return None  # retry                                       
     977 │   │   except Exception as e:                                         
     978 │   │   │   if not no_retry:                                           
  ❱  979 │   │   │   │   raise e                                                
     980 │   │   │   logger.debug("Ignored error", exc_info=True)               
     981 │   │   │   return {}                                                  
     982                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:884 in _request_exec_wrapper                                             
                                                                                
     881 │   │   full_url = retry_ctx.add_retry_params(full_url)                
     882 │   │   full_url = SnowflakeRestful.add_request_guid(full_url)         
     883 │   │   try:                                                           
  ❱  884 │   │   │   return_object = self._request_exec(                        
     885 │   │   │   │   session=session,                                       
     886 │   │   │   │   method=method,                                         
     887 │   │   │   │   full_url=full_url,                                     
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1193 in _request_exec                                                    
                                                                                
    1190 │   │   │   │   exception=err,                                         
    1191 │   │   │   │   stack_trace=traceback.format_exc(),                    
    1192 │   │   │   )                                                          
  ❱ 1193 │   │   │   raise err                                                  
    1194 │                                                                      
    1195 │   def make_requests_session(self) -> Session:                        
    1196 │   │   s = requests.Session()                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1104 in _request_exec                                                    
                                                                                
    1101 │   │   │   │   │   return ret                                         
    1102 │   │   │   │                                                          
    1103 │   │   │   │   if is_login_request(full_url) and raw_ret.status_code  
  ❱ 1104 │   │   │   │   │   raise ForbiddenError                               
    1105 │   │   │   │                                                          
    1106 │   │   │   │   elif is_retryable_http_code(raw_ret.status_code):      
    1107 │   │   │   │   │   err = get_http_retryable_error(raw_ret.status_cod  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: HTTP 403: Forbidden

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:118 in _connect                                           
                                                                                
    115 │   │   │   │   │   "See the [SnowflakeConnection configuration docume  
    116 │   │   │   │   │   "for more details and examples."                    
    117 │   │   │   │   )                                                       
  ❱ 118 │   │   │   raise e                                                     
    119 │                                                                       
    120 │   def query(                                                          
    121 │   │   self,                                                           
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:82 in _connect                                            
                                                                                
     79 │   │   │   st_secrets = self._secrets.to_dict()                        
     80 │   │   │   if len(st_secrets):                                         
     81 │   │   │   │   conn_kwargs = {**st_secrets, **kwargs}                  
  ❱  82 │   │   │   │   return snowflake.connector.connect(**conn_kwargs)       
     83 │   │   │                                                               
     84 │   │   │   # session.connector.connection.CONFIG_MANAGER is only avai  
     85 │   │   │   # versions of snowflake-connector-python.                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:442 in __init__                                                       
                                                                                
     439 │   │   │   # connection_name is None and kwargs was empty when calle  
     440 │   │   │   kwargs = _get_default_connection_params()                  
     441 │   │   self.__set_error_attributes()                                  
  ❱  442 │   │   self.connect(**kwargs)                                         
     443 │   │   self._telemetry = TelemetryClient(self._rest)                  
     444 │   │   self.expired = False                                           
     445                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:745 in connect                                                        
                                                                                
     742 │   │   │   │   if exceptions_dict:                                    
     743 │   │   │   │   │   raise Exception(str(exceptions_dict))              
     744 │   │   else:                                                          
  ❱  745 │   │   │   self.__open_connection()                                   
     746 │                                                                      
     747 │   def close(self, retry: bool = True) -> None:                       
     748 │   │   """Closes the connection."""                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1073 in __open_connection                                             
                                                                                
    1070 │   │   │   │   │   backoff_generator=self._backoff_generator,         
    1071 │   │   │   │   )                                                      
    1072 │   │   │                                                              
  ❱ 1073 │   │   │   self.authenticate_with_retry(self.auth_class)              
    1074 │   │   │                                                              
    1075 │   │   │   self._password = None  # ensure password won't persist     
    1076 │   │   │   self.auth_class.reset_secrets()                            
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1345 in authenticate_with_retry                                       
                                                                                
    1342 │   def authenticate_with_retry(self, auth_instance) -> None:          
    1343 │   │   # make some changes if needed before real __authenticate       
    1344 │   │   try:                                                           
  ❱ 1345 │   │   │   self._authenticate(auth_instance)                          
    1346 │   │   except ReauthenticationRequest as ex:                          
    1347 │   │   │   # cached id_token expiration error, we have cleaned id_to  
    1348 │   │   │   logger.debug("ID token expired. Reauthenticating...: %s",  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1373 in _authenticate                                                 
                                                                                
    1370 │   │   # record start time for computing timeout                      
    1371 │   │   auth_instance._retry_ctx.set_start_time()                      
    1372 │   │   try:                                                           
  ❱ 1373 │   │   │   auth.authenticate(                                         
    1374 │   │   │   │   auth_instance=auth_instance,                           
    1375 │   │   │   │   account=self.account,                                  
    1376 │   │   │   │   user=self.user,                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:258 in authenticate                                                   
                                                                                
    255 │   │   │   )                                                           
    256 │   │   except ForbiddenError as err:                                   
    257 │   │   │   # HTTP 403                                                  
  ❱ 258 │   │   │   raise err.__class__(                                        
    259 │   │   │   │   msg=(                                                   
    260 │   │   │   │   │   "Failed to connect to DB. "                         
    261 │   │   │   │   │   "Verify the account name is correct: {host}:{port}  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: 250001 (08001): Failed to connect to DB. Verify the account name
is correct: xxx.snowflakecomputing.com:443. HTTP 403: Forbidden
2024-05-08 16:04:26.669 503 GET /script-health-check (10.12.76.29) 217.79ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:250 in authenticate                                                   
                                                                                
    247 │   │   )                                                               
    248 │   │                                                                   
    249 │   │   try:                                                            
  ❱ 250 │   │   │   ret = self._rest._post_request(                             
    251 │   │   │   │   url,                                                    
    252 │   │   │   │   headers,                                                
    253 │   │   │   │   json.dumps(body),                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:734 in _post_request                                                     
                                                                                
     731 │   │   │   ret = probe_connection(full_url)                           
     732 │   │   │   pprint(ret)                                                
     733 │   │                                                                  
  ❱  734 │   │   ret = self.fetch(                                              
     735 │   │   │   "post",                                                    
     736 │   │   │   full_url,                                                  
     737 │   │   │   headers,                                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:843 in fetch                                                             
                                                                                
     840 │   │   │                                                              
     841 │   │   │   retry_ctx.set_start_time()                                 
     842 │   │   │   while True:                                                
  ❱  843 │   │   │   │   ret = self._request_exec_wrapper(                      
     844 │   │   │   │   │   session, method, full_url, headers, data, retry_c  
     845 │   │   │   │   )                                                      
     846 │   │   │   │   if ret is not None:                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:979 in _request_exec_wrapper                                             
                                                                                
     976 │   │   │   return None  # retry                                       
     977 │   │   except Exception as e:                                         
     978 │   │   │   if not no_retry:                                           
  ❱  979 │   │   │   │   raise e                                                
     980 │   │   │   logger.debug("Ignored error", exc_info=True)               
     981 │   │   │   return {}                                                  
     982                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:884 in _request_exec_wrapper                                             
                                                                                
     881 │   │   full_url = retry_ctx.add_retry_params(full_url)                
     882 │   │   full_url = SnowflakeRestful.add_request_guid(full_url)         
     883 │   │   try:                                                           
  ❱  884 │   │   │   return_object = self._request_exec(                        
     885 │   │   │   │   session=session,                                       
     886 │   │   │   │   method=method,                                         
     887 │   │   │   │   full_url=full_url,                                     
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1193 in _request_exec                                                    
                                                                                
    1190 │   │   │   │   exception=err,                                         
    1191 │   │   │   │   stack_trace=traceback.format_exc(),                    
    1192 │   │   │   )                                                          
  ❱ 1193 │   │   │   raise err                                                  
    1194 │                                                                      
    1195 │   def make_requests_session(self) -> Session:                        
    1196 │   │   s = requests.Session()                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1104 in _request_exec                                                    
                                                                                
    1101 │   │   │   │   │   return ret                                         
    1102 │   │   │   │                                                          
    1103 │   │   │   │   if is_login_request(full_url) and raw_ret.status_code  
  ❱ 1104 │   │   │   │   │   raise ForbiddenError                               
    1105 │   │   │   │                                                          
    1106 │   │   │   │   elif is_retryable_http_code(raw_ret.status_code):      
    1107 │   │   │   │   │   err = get_http_retryable_error(raw_ret.status_cod  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: HTTP 403: Forbidden

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:118 in _connect                                           
                                                                                
    115 │   │   │   │   │   "See the [SnowflakeConnection configuration docume  
    116 │   │   │   │   │   "for more details and examples."                    
    117 │   │   │   │   )                                                       
  ❱ 118 │   │   │   raise e                                                     
    119 │                                                                       
    120 │   def query(                                                          
    121 │   │   self,                                                           
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:82 in _connect                                            
                                                                                
     79 │   │   │   st_secrets = self._secrets.to_dict()                        
     80 │   │   │   if len(st_secrets):                                         
     81 │   │   │   │   conn_kwargs = {**st_secrets, **kwargs}                  
  ❱  82 │   │   │   │   return snowflake.connector.connect(**conn_kwargs)       
     83 │   │   │                                                               
     84 │   │   │   # session.connector.connection.CONFIG_MANAGER is only avai  
     85 │   │   │   # versions of snowflake-connector-python.                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:442 in __init__                                                       
                                                                                
     439 │   │   │   # connection_name is None and kwargs was empty when calle  
     440 │   │   │   kwargs = _get_default_connection_params()                  
     441 │   │   self.__set_error_attributes()                                  
  ❱  442 │   │   self.connect(**kwargs)                                         
     443 │   │   self._telemetry = TelemetryClient(self._rest)                  
     444 │   │   self.expired = False                                           
     445                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:745 in connect                                                        
                                                                                
     742 │   │   │   │   if exceptions_dict:                                    
     743 │   │   │   │   │   raise Exception(str(exceptions_dict))              
     744 │   │   else:                                                          
  ❱  745 │   │   │   self.__open_connection()                                   
     746 │                                                                      
     747 │   def close(self, retry: bool = True) -> None:                       
     748 │   │   """Closes the connection."""                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1073 in __open_connection                                             
                                                                                
    1070 │   │   │   │   │   backoff_generator=self._backoff_generator,         
    1071 │   │   │   │   )                                                      
    1072 │   │   │                                                              
  ❱ 1073 │   │   │   self.authenticate_with_retry(self.auth_class)              
    1074 │   │   │                                                              
    1075 │   │   │   self._password = None  # ensure password won't persist     
    1076 │   │   │   self.auth_class.reset_secrets()                            
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1345 in authenticate_with_retry                                       
                                                                                
    1342 │   def authenticate_with_retry(self, auth_instance) -> None:          
    1343 │   │   # make some changes if needed before real __authenticate       
    1344 │   │   try:                                                           
  ❱ 1345 │   │   │   self._authenticate(auth_instance)                          
    1346 │   │   except ReauthenticationRequest as ex:                          
    1347 │   │   │   # cached id_token expiration error, we have cleaned id_to  
    1348 │   │   │   logger.debug("ID token expired. Reauthenticating...: %s",  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1373 in _authenticate                                                 
                                                                                
    1370 │   │   # record start time for computing timeout                      
    1371 │   │   auth_instance._retry_ctx.set_start_time()                      
    1372 │   │   try:                                                           
  ❱ 1373 │   │   │   auth.authenticate(                                         
    1374 │   │   │   │   auth_instance=auth_instance,                           
    1375 │   │   │   │   account=self.account,                                  
    1376 │   │   │   │   user=self.user,                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:258 in authenticate                                                   
                                                                                
    255 │   │   │   )                                                           
    256 │   │   except ForbiddenError as err:                                   
    257 │   │   │   # HTTP 403                                                  
  ❱ 258 │   │   │   raise err.__class__(                                        
    259 │   │   │   │   msg=(                                                   
    260 │   │   │   │   │   "Failed to connect to DB. "                         
    261 │   │   │   │   │   "Verify the account name is correct: {host}:{port}  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: 250001 (08001): Failed to connect to DB. Verify the account name
is correct: xxx.snowflakecomputing.com:443. HTTP 403: Forbidden
2024-05-08 16:04:31.634 503 GET /script-health-check (10.12.76.29) 217.85ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:250 in authenticate                                                   
                                                                                
    247 │   │   )                                                               
    248 │   │                                                                   
    249 │   │   try:                                                            
  ❱ 250 │   │   │   ret = self._rest._post_request(                             
    251 │   │   │   │   url,                                                    
    252 │   │   │   │   headers,                                                
    253 │   │   │   │   json.dumps(body),                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:734 in _post_request                                                     
                                                                                
     731 │   │   │   ret = probe_connection(full_url)                           
     732 │   │   │   pprint(ret)                                                
     733 │   │                                                                  
  ❱  734 │   │   ret = self.fetch(                                              
     735 │   │   │   "post",                                                    
     736 │   │   │   full_url,                                                  
     737 │   │   │   headers,                                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:843 in fetch                                                             
                                                                                
     840 │   │   │                                                              
     841 │   │   │   retry_ctx.set_start_time()                                 
     842 │   │   │   while True:                                                
  ❱  843 │   │   │   │   ret = self._request_exec_wrapper(                      
     844 │   │   │   │   │   session, method, full_url, headers, data, retry_c  
     845 │   │   │   │   )                                                      
     846 │   │   │   │   if ret is not None:                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:979 in _request_exec_wrapper                                             
                                                                                
     976 │   │   │   return None  # retry                                       
     977 │   │   except Exception as e:                                         
     978 │   │   │   if not no_retry:                                           
  ❱  979 │   │   │   │   raise e                                                
     980 │   │   │   logger.debug("Ignored error", exc_info=True)               
     981 │   │   │   return {}                                                  
     982                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:884 in _request_exec_wrapper                                             
                                                                                
     881 │   │   full_url = retry_ctx.add_retry_params(full_url)                
     882 │   │   full_url = SnowflakeRestful.add_request_guid(full_url)         
     883 │   │   try:                                                           
  ❱  884 │   │   │   return_object = self._request_exec(                        
     885 │   │   │   │   session=session,                                       
     886 │   │   │   │   method=method,                                         
     887 │   │   │   │   full_url=full_url,                                     
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1193 in _request_exec                                                    
                                                                                
    1190 │   │   │   │   exception=err,                                         
    1191 │   │   │   │   stack_trace=traceback.format_exc(),                    
    1192 │   │   │   )                                                          
  ❱ 1193 │   │   │   raise err                                                  
    1194 │                                                                      
    1195 │   def make_requests_session(self) -> Session:                        
    1196 │   │   s = requests.Session()                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1104 in _request_exec                                                    
                                                                                
    1101 │   │   │   │   │   return ret                                         
    1102 │   │   │   │                                                          
    1103 │   │   │   │   if is_login_request(full_url) and raw_ret.status_code  
  ❱ 1104 │   │   │   │   │   raise ForbiddenError                               
    1105 │   │   │   │                                                          
    1106 │   │   │   │   elif is_retryable_http_code(raw_ret.status_code):      
    1107 │   │   │   │   │   err = get_http_retryable_error(raw_ret.status_cod  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: HTTP 403: Forbidden

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:118 in _connect                                           
                                                                                
    115 │   │   │   │   │   "See the [SnowflakeConnection configuration docume  
    116 │   │   │   │   │   "for more details and examples."                    
    117 │   │   │   │   )                                                       
  ❱ 118 │   │   │   raise e                                                     
    119 │                                                                       
    120 │   def query(                                                          
    121 │   │   self,                                                           
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:82 in _connect                                            
                                                                                
     79 │   │   │   st_secrets = self._secrets.to_dict()                        
     80 │   │   │   if len(st_secrets):                                         
     81 │   │   │   │   conn_kwargs = {**st_secrets, **kwargs}                  
  ❱  82 │   │   │   │   return snowflake.connector.connect(**conn_kwargs)       
     83 │   │   │                                                               
     84 │   │   │   # session.connector.connection.CONFIG_MANAGER is only avai  
     85 │   │   │   # versions of snowflake-connector-python.                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:442 in __init__                                                       
                                                                                
     439 │   │   │   # connection_name is None and kwargs was empty when calle  
     440 │   │   │   kwargs = _get_default_connection_params()                  
     441 │   │   self.__set_error_attributes()                                  
  ❱  442 │   │   self.connect(**kwargs)                                         
     443 │   │   self._telemetry = TelemetryClient(self._rest)                  
     444 │   │   self.expired = False                                           
     445                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:745 in connect                                                        
                                                                                
     742 │   │   │   │   if exceptions_dict:                                    
     743 │   │   │   │   │   raise Exception(str(exceptions_dict))              
     744 │   │   else:                                                          
  ❱  745 │   │   │   self.__open_connection()                                   
     746 │                                                                      
     747 │   def close(self, retry: bool = True) -> None:                       
     748 │   │   """Closes the connection."""                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1073 in __open_connection                                             
                                                                                
    1070 │   │   │   │   │   backoff_generator=self._backoff_generator,         
    1071 │   │   │   │   )                                                      
    1072 │   │   │                                                              
  ❱ 1073 │   │   │   self.authenticate_with_retry(self.auth_class)              
    1074 │   │   │                                                              
    1075 │   │   │   self._password = None  # ensure password won't persist     
    1076 │   │   │   self.auth_class.reset_secrets()                            
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1345 in authenticate_with_retry                                       
                                                                                
    1342 │   def authenticate_with_retry(self, auth_instance) -> None:          
    1343 │   │   # make some changes if needed before real __authenticate       
    1344 │   │   try:                                                           
  ❱ 1345 │   │   │   self._authenticate(auth_instance)                          
    1346 │   │   except ReauthenticationRequest as ex:                          
    1347 │   │   │   # cached id_token expiration error, we have cleaned id_to  
    1348 │   │   │   logger.debug("ID token expired. Reauthenticating...: %s",  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1373 in _authenticate                                                 
                                                                                
    1370 │   │   # record start time for computing timeout                      
    1371 │   │   auth_instance._retry_ctx.set_start_time()                      
    1372 │   │   try:                                                           
  ❱ 1373 │   │   │   auth.authenticate(                                         
    1374 │   │   │   │   auth_instance=auth_instance,                           
    1375 │   │   │   │   account=self.account,                                  
    1376 │   │   │   │   user=self.user,                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:258 in authenticate                                                   
                                                                                
    255 │   │   │   )                                                           
    256 │   │   except ForbiddenError as err:                                   
    257 │   │   │   # HTTP 403                                                  
  ❱ 258 │   │   │   raise err.__class__(                                        
    259 │   │   │   │   msg=(                                                   
    260 │   │   │   │   │   "Failed to connect to DB. "                         
    261 │   │   │   │   │   "Verify the account name is correct: {host}:{port}  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: 250001 (08001): Failed to connect to DB. Verify the account name
is correct: xxx.snowflakecomputing.com:443. HTTP 403: Forbidden
2024-05-08 16:04:36.636 503 GET /script-health-check (10.12.76.29) 214.51ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:250 in authenticate                                                   
                                                                                
    247 │   │   )                                                               
    248 │   │                                                                   
    249 │   │   try:                                                            
  ❱ 250 │   │   │   ret = self._rest._post_request(                             
    251 │   │   │   │   url,                                                    
    252 │   │   │   │   headers,                                                
    253 │   │   │   │   json.dumps(body),                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:734 in _post_request                                                     
                                                                                
     731 │   │   │   ret = probe_connection(full_url)                           
     732 │   │   │   pprint(ret)                                                
     733 │   │                                                                  
  ❱  734 │   │   ret = self.fetch(                                              
     735 │   │   │   "post",                                                    
     736 │   │   │   full_url,                                                  
     737 │   │   │   headers,                                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:843 in fetch                                                             
                                                                                
     840 │   │   │                                                              
     841 │   │   │   retry_ctx.set_start_time()                                 
     842 │   │   │   while True:                                                
  ❱  843 │   │   │   │   ret = self._request_exec_wrapper(                      
     844 │   │   │   │   │   session, method, full_url, headers, data, retry_c  
     845 │   │   │   │   )                                                      
     846 │   │   │   │   if ret is not None:                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:979 in _request_exec_wrapper                                             
                                                                                
     976 │   │   │   return None  # retry                                       
     977 │   │   except Exception as e:                                         
     978 │   │   │   if not no_retry:                                           
  ❱  979 │   │   │   │   raise e                                                
     980 │   │   │   logger.debug("Ignored error", exc_info=True)               
     981 │   │   │   return {}                                                  
     982                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:884 in _request_exec_wrapper                                             
                                                                                
     881 │   │   full_url = retry_ctx.add_retry_params(full_url)                
     882 │   │   full_url = SnowflakeRestful.add_request_guid(full_url)         
     883 │   │   try:                                                           
  ❱  884 │   │   │   return_object = self._request_exec(                        
     885 │   │   │   │   session=session,                                       
     886 │   │   │   │   method=method,                                         
     887 │   │   │   │   full_url=full_url,                                     
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1193 in _request_exec                                                    
                                                                                
    1190 │   │   │   │   exception=err,                                         
    1191 │   │   │   │   stack_trace=traceback.format_exc(),                    
    1192 │   │   │   )                                                          
  ❱ 1193 │   │   │   raise err                                                  
    1194 │                                                                      
    1195 │   def make_requests_session(self) -> Session:                        
    1196 │   │   s = requests.Session()                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1104 in _request_exec                                                    
                                                                                
    1101 │   │   │   │   │   return ret                                         
    1102 │   │   │   │                                                          
    1103 │   │   │   │   if is_login_request(full_url) and raw_ret.status_code  
  ❱ 1104 │   │   │   │   │   raise ForbiddenError                               
    1105 │   │   │   │                                                          
    1106 │   │   │   │   elif is_retryable_http_code(raw_ret.status_code):      
    1107 │   │   │   │   │   err = get_http_retryable_error(raw_ret.status_cod  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: HTTP 403: Forbidden

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:118 in _connect                                           
                                                                                
    115 │   │   │   │   │   "See the [SnowflakeConnection configuration docume  
    116 │   │   │   │   │   "for more details and examples."                    
    117 │   │   │   │   )                                                       
  ❱ 118 │   │   │   raise e                                                     
    119 │                                                                       
    120 │   def query(                                                          
    121 │   │   self,                                                           
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:82 in _connect                                            
                                                                                
     79 │   │   │   st_secrets = self._secrets.to_dict()                        
     80 │   │   │   if len(st_secrets):                                         
     81 │   │   │   │   conn_kwargs = {**st_secrets, **kwargs}                  
  ❱  82 │   │   │   │   return snowflake.connector.connect(**conn_kwargs)       
     83 │   │   │                                                               
     84 │   │   │   # session.connector.connection.CONFIG_MANAGER is only avai  
     85 │   │   │   # versions of snowflake-connector-python.                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:442 in __init__                                                       
                                                                                
     439 │   │   │   # connection_name is None and kwargs was empty when calle  
     440 │   │   │   kwargs = _get_default_connection_params()                  
     441 │   │   self.__set_error_attributes()                                  
  ❱  442 │   │   self.connect(**kwargs)                                         
     443 │   │   self._telemetry = TelemetryClient(self._rest)                  
     444 │   │   self.expired = False                                           
     445                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:745 in connect                                                        
                                                                                
     742 │   │   │   │   if exceptions_dict:                                    
     743 │   │   │   │   │   raise Exception(str(exceptions_dict))              
     744 │   │   else:                                                          
  ❱  745 │   │   │   self.__open_connection()                                   
     746 │                                                                      
     747 │   def close(self, retry: bool = True) -> None:                       
     748 │   │   """Closes the connection."""                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1073 in __open_connection                                             
                                                                                
    1070 │   │   │   │   │   backoff_generator=self._backoff_generator,         
    1071 │   │   │   │   )                                                      
    1072 │   │   │                                                              
  ❱ 1073 │   │   │   self.authenticate_with_retry(self.auth_class)              
    1074 │   │   │                                                              
    1075 │   │   │   self._password = None  # ensure password won't persist     
    1076 │   │   │   self.auth_class.reset_secrets()                            
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1345 in authenticate_with_retry                                       
                                                                                
    1342 │   def authenticate_with_retry(self, auth_instance) -> None:          
    1343 │   │   # make some changes if needed before real __authenticate       
    1344 │   │   try:                                                           
  ❱ 1345 │   │   │   self._authenticate(auth_instance)                          
    1346 │   │   except ReauthenticationRequest as ex:                          
    1347 │   │   │   # cached id_token expiration error, we have cleaned id_to  
    1348 │   │   │   logger.debug("ID token expired. Reauthenticating...: %s",  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1373 in _authenticate                                                 
                                                                                
    1370 │   │   # record start time for computing timeout                      
    1371 │   │   auth_instance._retry_ctx.set_start_time()                      
    1372 │   │   try:                                                           
  ❱ 1373 │   │   │   auth.authenticate(                                         
    1374 │   │   │   │   auth_instance=auth_instance,                           
    1375 │   │   │   │   account=self.account,                                  
    1376 │   │   │   │   user=self.user,                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:258 in authenticate                                                   
                                                                                
    255 │   │   │   )                                                           
    256 │   │   except ForbiddenError as err:                                   
    257 │   │   │   # HTTP 403                                                  
  ❱ 258 │   │   │   raise err.__class__(                                        
    259 │   │   │   │   msg=(                                                   
    260 │   │   │   │   │   "Failed to connect to DB. "                         
    261 │   │   │   │   │   "Verify the account name is correct: {host}:{port}  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: 250001 (08001): Failed to connect to DB. Verify the account name
is correct: xxx.snowflakecomputing.com:443. HTTP 403: Forbidden
2024-05-08 16:04:42.267 503 GET /script-health-check (10.12.76.29) 824.23ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:250 in authenticate                                                   
                                                                                
    247 │   │   )                                                               
    248 │   │                                                                   
    249 │   │   try:                                                            
  ❱ 250 │   │   │   ret = self._rest._post_request(                             
    251 │   │   │   │   url,                                                    
    252 │   │   │   │   headers,                                                
    253 │   │   │   │   json.dumps(body),                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:734 in _post_request                                                     
                                                                                
     731 │   │   │   ret = probe_connection(full_url)                           
     732 │   │   │   pprint(ret)                                                
     733 │   │                                                                  
  ❱  734 │   │   ret = self.fetch(                                              
     735 │   │   │   "post",                                                    
     736 │   │   │   full_url,                                                  
     737 │   │   │   headers,                                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:843 in fetch                                                             
                                                                                
     840 │   │   │                                                              
     841 │   │   │   retry_ctx.set_start_time()                                 
     842 │   │   │   while True:                                                
  ❱  843 │   │   │   │   ret = self._request_exec_wrapper(                      
     844 │   │   │   │   │   session, method, full_url, headers, data, retry_c  
     845 │   │   │   │   )                                                      
     846 │   │   │   │   if ret is not None:                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:979 in _request_exec_wrapper                                             
                                                                                
     976 │   │   │   return None  # retry                                       
     977 │   │   except Exception as e:                                         
     978 │   │   │   if not no_retry:                                           
  ❱  979 │   │   │   │   raise e                                                
     980 │   │   │   logger.debug("Ignored error", exc_info=True)               
     981 │   │   │   return {}                                                  
     982                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:884 in _request_exec_wrapper                                             
                                                                                
     881 │   │   full_url = retry_ctx.add_retry_params(full_url)                
     882 │   │   full_url = SnowflakeRestful.add_request_guid(full_url)         
     883 │   │   try:                                                           
  ❱  884 │   │   │   return_object = self._request_exec(                        
     885 │   │   │   │   session=session,                                       
     886 │   │   │   │   method=method,                                         
     887 │   │   │   │   full_url=full_url,                                     
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1193 in _request_exec                                                    
                                                                                
    1190 │   │   │   │   exception=err,                                         
    1191 │   │   │   │   stack_trace=traceback.format_exc(),                    
    1192 │   │   │   )                                                          
  ❱ 1193 │   │   │   raise err                                                  
    1194 │                                                                      
    1195 │   def make_requests_session(self) -> Session:                        
    1196 │   │   s = requests.Session()                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1104 in _request_exec                                                    
                                                                                
    1101 │   │   │   │   │   return ret                                         
    1102 │   │   │   │                                                          
    1103 │   │   │   │   if is_login_request(full_url) and raw_ret.status_code  
  ❱ 1104 │   │   │   │   │   raise ForbiddenError                               
    1105 │   │   │   │                                                          
    1106 │   │   │   │   elif is_retryable_http_code(raw_ret.status_code):      
    1107 │   │   │   │   │   err = get_http_retryable_error(raw_ret.status_cod  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: HTTP 403: Forbidden

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:118 in _connect                                           
                                                                                
    115 │   │   │   │   │   "See the [SnowflakeConnection configuration docume  
    116 │   │   │   │   │   "for more details and examples."                    
    117 │   │   │   │   )                                                       
  ❱ 118 │   │   │   raise e                                                     
    119 │                                                                       
    120 │   def query(                                                          
    121 │   │   self,                                                           
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:82 in _connect                                            
                                                                                
     79 │   │   │   st_secrets = self._secrets.to_dict()                        
     80 │   │   │   if len(st_secrets):                                         
     81 │   │   │   │   conn_kwargs = {**st_secrets, **kwargs}                  
  ❱  82 │   │   │   │   return snowflake.connector.connect(**conn_kwargs)       
     83 │   │   │                                                               
     84 │   │   │   # session.connector.connection.CONFIG_MANAGER is only avai  
     85 │   │   │   # versions of snowflake-connector-python.                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:442 in __init__                                                       
                                                                                
     439 │   │   │   # connection_name is None and kwargs was empty when calle  
     440 │   │   │   kwargs = _get_default_connection_params()                  
     441 │   │   self.__set_error_attributes()                                  
  ❱  442 │   │   self.connect(**kwargs)                                         
     443 │   │   self._telemetry = TelemetryClient(self._rest)                  
     444 │   │   self.expired = False                                           
     445                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:745 in connect                                                        
                                                                                
     742 │   │   │   │   if exceptions_dict:                                    
     743 │   │   │   │   │   raise Exception(str(exceptions_dict))              
     744 │   │   else:                                                          
  ❱  745 │   │   │   self.__open_connection()                                   
     746 │                                                                      
     747 │   def close(self, retry: bool = True) -> None:                       
     748 │   │   """Closes the connection."""                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1073 in __open_connection                                             
                                                                                
    1070 │   │   │   │   │   backoff_generator=self._backoff_generator,         
    1071 │   │   │   │   )                                                      
    1072 │   │   │                                                              
  ❱ 1073 │   │   │   self.authenticate_with_retry(self.auth_class)              
    1074 │   │   │                                                              
    1075 │   │   │   self._password = None  # ensure password won't persist     
    1076 │   │   │   self.auth_class.reset_secrets()                            
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1345 in authenticate_with_retry                                       
                                                                                
    1342 │   def authenticate_with_retry(self, auth_instance) -> None:          
    1343 │   │   # make some changes if needed before real __authenticate       
    1344 │   │   try:                                                           
  ❱ 1345 │   │   │   self._authenticate(auth_instance)                          
    1346 │   │   except ReauthenticationRequest as ex:                          
    1347 │   │   │   # cached id_token expiration error, we have cleaned id_to  
    1348 │   │   │   logger.debug("ID token expired. Reauthenticating...: %s",  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1373 in _authenticate                                                 
                                                                                
    1370 │   │   # record start time for computing timeout                      
    1371 │   │   auth_instance._retry_ctx.set_start_time()                      
    1372 │   │   try:                                                           
  ❱ 1373 │   │   │   auth.authenticate(                                         
    1374 │   │   │   │   auth_instance=auth_instance,                           
    1375 │   │   │   │   account=self.account,                                  
    1376 │   │   │   │   user=self.user,                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:258 in authenticate                                                   
                                                                                
    255 │   │   │   )                                                           
    256 │   │   except ForbiddenError as err:                                   
    257 │   │   │   # HTTP 403                                                  
  ❱ 258 │   │   │   raise err.__class__(                                        
    259 │   │   │   │   msg=(                                                   
    260 │   │   │   │   │   "Failed to connect to DB. "                         
    261 │   │   │   │   │   "Verify the account name is correct: {host}:{port}  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: 250001 (08001): Failed to connect to DB. Verify the account name
is correct: xxx.snowflakecomputing.com:443. HTTP 403: Forbidden
2024-05-08 16:04:46.644 503 GET /script-health-check (10.12.76.29) 211.13ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:250 in authenticate                                                   
                                                                                
    247 │   │   )                                                               
    248 │   │                                                                   
    249 │   │   try:                                                            
  ❱ 250 │   │   │   ret = self._rest._post_request(                             
    251 │   │   │   │   url,                                                    
    252 │   │   │   │   headers,                                                
    253 │   │   │   │   json.dumps(body),                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:734 in _post_request                                                     
                                                                                
     731 │   │   │   ret = probe_connection(full_url)                           
     732 │   │   │   pprint(ret)                                                
     733 │   │                                                                  
  ❱  734 │   │   ret = self.fetch(                                              
     735 │   │   │   "post",                                                    
     736 │   │   │   full_url,                                                  
     737 │   │   │   headers,                                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:843 in fetch                                                             
                                                                                
     840 │   │   │                                                              
     841 │   │   │   retry_ctx.set_start_time()                                 
     842 │   │   │   while True:                                                
  ❱  843 │   │   │   │   ret = self._request_exec_wrapper(                      
     844 │   │   │   │   │   session, method, full_url, headers, data, retry_c  
     845 │   │   │   │   )                                                      
     846 │   │   │   │   if ret is not None:                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:979 in _request_exec_wrapper                                             
                                                                                
     976 │   │   │   return None  # retry                                       
     977 │   │   except Exception as e:                                         
     978 │   │   │   if not no_retry:                                           
  ❱  979 │   │   │   │   raise e                                                
     980 │   │   │   logger.debug("Ignored error", exc_info=True)               
     981 │   │   │   return {}                                                  
     982                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:884 in _request_exec_wrapper                                             
                                                                                
     881 │   │   full_url = retry_ctx.add_retry_params(full_url)                
     882 │   │   full_url = SnowflakeRestful.add_request_guid(full_url)         
     883 │   │   try:                                                           
  ❱  884 │   │   │   return_object = self._request_exec(                        
     885 │   │   │   │   session=session,                                       
     886 │   │   │   │   method=method,                                         
     887 │   │   │   │   full_url=full_url,                                     
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1193 in _request_exec                                                    
                                                                                
    1190 │   │   │   │   exception=err,                                         
    1191 │   │   │   │   stack_trace=traceback.format_exc(),                    
    1192 │   │   │   )                                                          
  ❱ 1193 │   │   │   raise err                                                  
    1194 │                                                                      
    1195 │   def make_requests_session(self) -> Session:                        
    1196 │   │   s = requests.Session()                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1104 in _request_exec                                                    
                                                                                
    1101 │   │   │   │   │   return ret                                         
    1102 │   │   │   │                                                          
    1103 │   │   │   │   if is_login_request(full_url) and raw_ret.status_code  
  ❱ 1104 │   │   │   │   │   raise ForbiddenError                               
    1105 │   │   │   │                                                          
    1106 │   │   │   │   elif is_retryable_http_code(raw_ret.status_code):      
    1107 │   │   │   │   │   err = get_http_retryable_error(raw_ret.status_cod  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: HTTP 403: Forbidden

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:118 in _connect                                           
                                                                                
    115 │   │   │   │   │   "See the [SnowflakeConnection configuration docume  
    116 │   │   │   │   │   "for more details and examples."                    
    117 │   │   │   │   )                                                       
  ❱ 118 │   │   │   raise e                                                     
    119 │                                                                       
    120 │   def query(                                                          
    121 │   │   self,                                                           
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:82 in _connect                                            
                                                                                
     79 │   │   │   st_secrets = self._secrets.to_dict()                        
     80 │   │   │   if len(st_secrets):                                         
     81 │   │   │   │   conn_kwargs = {**st_secrets, **kwargs}                  
  ❱  82 │   │   │   │   return snowflake.connector.connect(**conn_kwargs)       
     83 │   │   │                                                               
     84 │   │   │   # session.connector.connection.CONFIG_MANAGER is only avai  
     85 │   │   │   # versions of snowflake-connector-python.                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:442 in __init__                                                       
                                                                                
     439 │   │   │   # connection_name is None and kwargs was empty when calle  
     440 │   │   │   kwargs = _get_default_connection_params()                  
     441 │   │   self.__set_error_attributes()                                  
  ❱  442 │   │   self.connect(**kwargs)                                         
     443 │   │   self._telemetry = TelemetryClient(self._rest)                  
     444 │   │   self.expired = False                                           
     445                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:745 in connect                                                        
                                                                                
     742 │   │   │   │   if exceptions_dict:                                    
     743 │   │   │   │   │   raise Exception(str(exceptions_dict))              
     744 │   │   else:                                                          
  ❱  745 │   │   │   self.__open_connection()                                   
     746 │                                                                      
     747 │   def close(self, retry: bool = True) -> None:                       
     748 │   │   """Closes the connection."""                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1073 in __open_connection                                             
                                                                                
    1070 │   │   │   │   │   backoff_generator=self._backoff_generator,         
    1071 │   │   │   │   )                                                      
    1072 │   │   │                                                              
  ❱ 1073 │   │   │   self.authenticate_with_retry(self.auth_class)              
    1074 │   │   │                                                              
    1075 │   │   │   self._password = None  # ensure password won't persist     
    1076 │   │   │   self.auth_class.reset_secrets()                            
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1345 in authenticate_with_retry                                       
                                                                                
    1342 │   def authenticate_with_retry(self, auth_instance) -> None:          
    1343 │   │   # make some changes if needed before real __authenticate       
    1344 │   │   try:                                                           
  ❱ 1345 │   │   │   self._authenticate(auth_instance)                          
    1346 │   │   except ReauthenticationRequest as ex:                          
    1347 │   │   │   # cached id_token expiration error, we have cleaned id_to  
    1348 │   │   │   logger.debug("ID token expired. Reauthenticating...: %s",  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1373 in _authenticate                                                 
                                                                                
    1370 │   │   # record start time for computing timeout                      
    1371 │   │   auth_instance._retry_ctx.set_start_time()                      
    1372 │   │   try:                                                           
  ❱ 1373 │   │   │   auth.authenticate(                                         
    1374 │   │   │   │   auth_instance=auth_instance,                           
    1375 │   │   │   │   account=self.account,                                  
    1376 │   │   │   │   user=self.user,                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:258 in authenticate                                                   
                                                                                
    255 │   │   │   )                                                           
    256 │   │   except ForbiddenError as err:                                   
    257 │   │   │   # HTTP 403                                                  
  ❱ 258 │   │   │   raise err.__class__(                                        
    259 │   │   │   │   msg=(                                                   
    260 │   │   │   │   │   "Failed to connect to DB. "                         
    261 │   │   │   │   │   "Verify the account name is correct: {host}:{port}  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: 250001 (08001): Failed to connect to DB. Verify the account name
is correct: xxx.snowflakecomputing.com:443. HTTP 403: Forbidden
2024-05-08 16:04:51.687 503 GET /script-health-check (10.12.76.29) 213.84ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:250 in authenticate                                                   
                                                                                
    247 │   │   )                                                               
    248 │   │                                                                   
    249 │   │   try:                                                            
  ❱ 250 │   │   │   ret = self._rest._post_request(                             
    251 │   │   │   │   url,                                                    
    252 │   │   │   │   headers,                                                
    253 │   │   │   │   json.dumps(body),                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:734 in _post_request                                                     
                                                                                
     731 │   │   │   ret = probe_connection(full_url)                           
     732 │   │   │   pprint(ret)                                                
     733 │   │                                                                  
  ❱  734 │   │   ret = self.fetch(                                              
     735 │   │   │   "post",                                                    
     736 │   │   │   full_url,                                                  
     737 │   │   │   headers,                                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:843 in fetch                                                             
                                                                                
     840 │   │   │                                                              
     841 │   │   │   retry_ctx.set_start_time()                                 
     842 │   │   │   while True:                                                
  ❱  843 │   │   │   │   ret = self._request_exec_wrapper(                      
     844 │   │   │   │   │   session, method, full_url, headers, data, retry_c  
     845 │   │   │   │   )                                                      
     846 │   │   │   │   if ret is not None:                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:979 in _request_exec_wrapper                                             
                                                                                
     976 │   │   │   return None  # retry                                       
     977 │   │   except Exception as e:                                         
     978 │   │   │   if not no_retry:                                           
  ❱  979 │   │   │   │   raise e                                                
     980 │   │   │   logger.debug("Ignored error", exc_info=True)               
     981 │   │   │   return {}                                                  
     982                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:884 in _request_exec_wrapper                                             
                                                                                
     881 │   │   full_url = retry_ctx.add_retry_params(full_url)                
     882 │   │   full_url = SnowflakeRestful.add_request_guid(full_url)         
     883 │   │   try:                                                           
  ❱  884 │   │   │   return_object = self._request_exec(                        
     885 │   │   │   │   session=session,                                       
     886 │   │   │   │   method=method,                                         
     887 │   │   │   │   full_url=full_url,                                     
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1193 in _request_exec                                                    
                                                                                
    1190 │   │   │   │   exception=err,                                         
    1191 │   │   │   │   stack_trace=traceback.format_exc(),                    
    1192 │   │   │   )                                                          
  ❱ 1193 │   │   │   raise err                                                  
    1194 │                                                                      
    1195 │   def make_requests_session(self) -> Session:                        
    1196 │   │   s = requests.Session()                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1104 in _request_exec                                                    
                                                                                
    1101 │   │   │   │   │   return ret                                         
    1102 │   │   │   │                                                          
    1103 │   │   │   │   if is_login_request(full_url) and raw_ret.status_code  
  ❱ 1104 │   │   │   │   │   raise ForbiddenError                               
    1105 │   │   │   │                                                          
    1106 │   │   │   │   elif is_retryable_http_code(raw_ret.status_code):      
    1107 │   │   │   │   │   err = get_http_retryable_error(raw_ret.status_cod  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: HTTP 403: Forbidden

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:118 in _connect                                           
                                                                                
    115 │   │   │   │   │   "See the [SnowflakeConnection configuration docume  
    116 │   │   │   │   │   "for more details and examples."                    
    117 │   │   │   │   )                                                       
  ❱ 118 │   │   │   raise e                                                     
    119 │                                                                       
    120 │   def query(                                                          
    121 │   │   self,                                                           
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:82 in _connect                                            
                                                                                
     79 │   │   │   st_secrets = self._secrets.to_dict()                        
     80 │   │   │   if len(st_secrets):                                         
     81 │   │   │   │   conn_kwargs = {**st_secrets, **kwargs}                  
  ❱  82 │   │   │   │   return snowflake.connector.connect(**conn_kwargs)       
     83 │   │   │                                                               
     84 │   │   │   # session.connector.connection.CONFIG_MANAGER is only avai  
     85 │   │   │   # versions of snowflake-connector-python.                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:442 in __init__                                                       
                                                                                
     439 │   │   │   # connection_name is None and kwargs was empty when calle  
     440 │   │   │   kwargs = _get_default_connection_params()                  
     441 │   │   self.__set_error_attributes()                                  
  ❱  442 │   │   self.connect(**kwargs)                                         
     443 │   │   self._telemetry = TelemetryClient(self._rest)                  
     444 │   │   self.expired = False                                           
     445                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:745 in connect                                                        
                                                                                
     742 │   │   │   │   if exceptions_dict:                                    
     743 │   │   │   │   │   raise Exception(str(exceptions_dict))              
     744 │   │   else:                                                          
  ❱  745 │   │   │   self.__open_connection()                                   
     746 │                                                                      
     747 │   def close(self, retry: bool = True) -> None:                       
     748 │   │   """Closes the connection."""                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1073 in __open_connection                                             
                                                                                
    1070 │   │   │   │   │   backoff_generator=self._backoff_generator,         
    1071 │   │   │   │   )                                                      
    1072 │   │   │                                                              
  ❱ 1073 │   │   │   self.authenticate_with_retry(self.auth_class)              
    1074 │   │   │                                                              
    1075 │   │   │   self._password = None  # ensure password won't persist     
    1076 │   │   │   self.auth_class.reset_secrets()                            
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1345 in authenticate_with_retry                                       
                                                                                
    1342 │   def authenticate_with_retry(self, auth_instance) -> None:          
    1343 │   │   # make some changes if needed before real __authenticate       
    1344 │   │   try:                                                           
  ❱ 1345 │   │   │   self._authenticate(auth_instance)                          
    1346 │   │   except ReauthenticationRequest as ex:                          
    1347 │   │   │   # cached id_token expiration error, we have cleaned id_to  
    1348 │   │   │   logger.debug("ID token expired. Reauthenticating...: %s",  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1373 in _authenticate                                                 
                                                                                
    1370 │   │   # record start time for computing timeout                      
    1371 │   │   auth_instance._retry_ctx.set_start_time()                      
    1372 │   │   try:                                                           
  ❱ 1373 │   │   │   auth.authenticate(                                         
    1374 │   │   │   │   auth_instance=auth_instance,                           
    1375 │   │   │   │   account=self.account,                                  
    1376 │   │   │   │   user=self.user,                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:258 in authenticate                                                   
                                                                                
    255 │   │   │   )                                                           
    256 │   │   except ForbiddenError as err:                                   
    257 │   │   │   # HTTP 403                                                  
  ❱ 258 │   │   │   raise err.__class__(                                        
    259 │   │   │   │   msg=(                                                   
    260 │   │   │   │   │   "Failed to connect to DB. "                         
    261 │   │   │   │   │   "Verify the account name is correct: {host}:{port}  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: 250001 (08001): Failed to connect to DB. Verify the account name
is correct: xxx.snowflakecomputing.com:443. HTTP 403: Forbidden
2024-05-08 16:04:57.427 503 GET /script-health-check (10.12.76.29) 920.30ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:250 in authenticate                                                   
                                                                                
    247 │   │   )                                                               
    248 │   │                                                                   
    249 │   │   try:                                                            
  ❱ 250 │   │   │   ret = self._rest._post_request(                             
    251 │   │   │   │   url,                                                    
    252 │   │   │   │   headers,                                                
    253 │   │   │   │   json.dumps(body),                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:734 in _post_request                                                     
                                                                                
     731 │   │   │   ret = probe_connection(full_url)                           
     732 │   │   │   pprint(ret)                                                
     733 │   │                                                                  
  ❱  734 │   │   ret = self.fetch(                                              
     735 │   │   │   "post",                                                    
     736 │   │   │   full_url,                                                  
     737 │   │   │   headers,                                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:843 in fetch                                                             
                                                                                
     840 │   │   │                                                              
     841 │   │   │   retry_ctx.set_start_time()                                 
     842 │   │   │   while True:                                                
  ❱  843 │   │   │   │   ret = self._request_exec_wrapper(                      
     844 │   │   │   │   │   session, method, full_url, headers, data, retry_c  
     845 │   │   │   │   )                                                      
     846 │   │   │   │   if ret is not None:                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:979 in _request_exec_wrapper                                             
                                                                                
     976 │   │   │   return None  # retry                                       
     977 │   │   except Exception as e:                                         
     978 │   │   │   if not no_retry:                                           
  ❱  979 │   │   │   │   raise e                                                
     980 │   │   │   logger.debug("Ignored error", exc_info=True)               
     981 │   │   │   return {}                                                  
     982                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:884 in _request_exec_wrapper                                             
                                                                                
     881 │   │   full_url = retry_ctx.add_retry_params(full_url)                
     882 │   │   full_url = SnowflakeRestful.add_request_guid(full_url)         
     883 │   │   try:                                                           
  ❱  884 │   │   │   return_object = self._request_exec(                        
     885 │   │   │   │   session=session,                                       
     886 │   │   │   │   method=method,                                         
     887 │   │   │   │   full_url=full_url,                                     
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1193 in _request_exec                                                    
                                                                                
    1190 │   │   │   │   exception=err,                                         
    1191 │   │   │   │   stack_trace=traceback.format_exc(),                    
    1192 │   │   │   )                                                          
  ❱ 1193 │   │   │   raise err                                                  
    1194 │                                                                      
    1195 │   def make_requests_session(self) -> Session:                        
    1196 │   │   s = requests.Session()                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1104 in _request_exec                                                    
                                                                                
    1101 │   │   │   │   │   return ret                                         
    1102 │   │   │   │                                                          
    1103 │   │   │   │   if is_login_request(full_url) and raw_ret.status_code  
  ❱ 1104 │   │   │   │   │   raise ForbiddenError                               
    1105 │   │   │   │                                                          
    1106 │   │   │   │   elif is_retryable_http_code(raw_ret.status_code):      
    1107 │   │   │   │   │   err = get_http_retryable_error(raw_ret.status_cod  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: HTTP 403: Forbidden

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:118 in _connect                                           
                                                                                
    115 │   │   │   │   │   "See the [SnowflakeConnection configuration docume  
    116 │   │   │   │   │   "for more details and examples."                    
    117 │   │   │   │   )                                                       
  ❱ 118 │   │   │   raise e                                                     
    119 │                                                                       
    120 │   def query(                                                          
    121 │   │   self,                                                           
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:82 in _connect                                            
                                                                                
     79 │   │   │   st_secrets = self._secrets.to_dict()                        
     80 │   │   │   if len(st_secrets):                                         
     81 │   │   │   │   conn_kwargs = {**st_secrets, **kwargs}                  
  ❱  82 │   │   │   │   return snowflake.connector.connect(**conn_kwargs)       
     83 │   │   │                                                               
     84 │   │   │   # session.connector.connection.CONFIG_MANAGER is only avai  
     85 │   │   │   # versions of snowflake-connector-python.                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:442 in __init__                                                       
                                                                                
     439 │   │   │   # connection_name is None and kwargs was empty when calle  
     440 │   │   │   kwargs = _get_default_connection_params()                  
     441 │   │   self.__set_error_attributes()                                  
  ❱  442 │   │   self.connect(**kwargs)                                         
     443 │   │   self._telemetry = TelemetryClient(self._rest)                  
     444 │   │   self.expired = False                                           
     445                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:745 in connect                                                        
                                                                                
     742 │   │   │   │   if exceptions_dict:                                    
     743 │   │   │   │   │   raise Exception(str(exceptions_dict))              
     744 │   │   else:                                                          
  ❱  745 │   │   │   self.__open_connection()                                   
     746 │                                                                      
     747 │   def close(self, retry: bool = True) -> None:                       
     748 │   │   """Closes the connection."""                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1073 in __open_connection                                             
                                                                                
    1070 │   │   │   │   │   backoff_generator=self._backoff_generator,         
    1071 │   │   │   │   )                                                      
    1072 │   │   │                                                              
  ❱ 1073 │   │   │   self.authenticate_with_retry(self.auth_class)              
    1074 │   │   │                                                              
    1075 │   │   │   self._password = None  # ensure password won't persist     
    1076 │   │   │   self.auth_class.reset_secrets()                            
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1345 in authenticate_with_retry                                       
                                                                                
    1342 │   def authenticate_with_retry(self, auth_instance) -> None:          
    1343 │   │   # make some changes if needed before real __authenticate       
    1344 │   │   try:                                                           
  ❱ 1345 │   │   │   self._authenticate(auth_instance)                          
    1346 │   │   except ReauthenticationRequest as ex:                          
    1347 │   │   │   # cached id_token expiration error, we have cleaned id_to  
    1348 │   │   │   logger.debug("ID token expired. Reauthenticating...: %s",  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1373 in _authenticate                                                 
                                                                                
    1370 │   │   # record start time for computing timeout                      
    1371 │   │   auth_instance._retry_ctx.set_start_time()                      
    1372 │   │   try:                                                           
  ❱ 1373 │   │   │   auth.authenticate(                                         
    1374 │   │   │   │   auth_instance=auth_instance,                           
    1375 │   │   │   │   account=self.account,                                  
    1376 │   │   │   │   user=self.user,                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:258 in authenticate                                                   
                                                                                
    255 │   │   │   )                                                           
    256 │   │   except ForbiddenError as err:                                   
    257 │   │   │   # HTTP 403                                                  
  ❱ 258 │   │   │   raise err.__class__(                                        
    259 │   │   │   │   msg=(                                                   
    260 │   │   │   │   │   "Failed to connect to DB. "                         
    261 │   │   │   │   │   "Verify the account name is correct: {host}:{port}  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: 250001 (08001): Failed to connect to DB. Verify the account name
is correct: xxx.snowflakecomputing.com:443. HTTP 403: Forbidden
2024-05-08 16:05:01.595 503 GET /script-health-check (10.12.76.29) 113.91ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:250 in authenticate                                                   
                                                                                
    247 │   │   )                                                               
    248 │   │                                                                   
    249 │   │   try:                                                            
  ❱ 250 │   │   │   ret = self._rest._post_request(                             
    251 │   │   │   │   url,                                                    
    252 │   │   │   │   headers,                                                
    253 │   │   │   │   json.dumps(body),                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:734 in _post_request                                                     
                                                                                
     731 │   │   │   ret = probe_connection(full_url)                           
     732 │   │   │   pprint(ret)                                                
     733 │   │                                                                  
  ❱  734 │   │   ret = self.fetch(                                              
     735 │   │   │   "post",                                                    
     736 │   │   │   full_url,                                                  
     737 │   │   │   headers,                                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:843 in fetch                                                             
                                                                                
     840 │   │   │                                                              
     841 │   │   │   retry_ctx.set_start_time()                                 
     842 │   │   │   while True:                                                
  ❱  843 │   │   │   │   ret = self._request_exec_wrapper(                      
     844 │   │   │   │   │   session, method, full_url, headers, data, retry_c  
     845 │   │   │   │   )                                                      
     846 │   │   │   │   if ret is not None:                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:979 in _request_exec_wrapper                                             
                                                                                
     976 │   │   │   return None  # retry                                       
     977 │   │   except Exception as e:                                         
     978 │   │   │   if not no_retry:                                           
  ❱  979 │   │   │   │   raise e                                                
     980 │   │   │   logger.debug("Ignored error", exc_info=True)               
     981 │   │   │   return {}                                                  
     982                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:884 in _request_exec_wrapper                                             
                                                                                
     881 │   │   full_url = retry_ctx.add_retry_params(full_url)                
     882 │   │   full_url = SnowflakeRestful.add_request_guid(full_url)         
     883 │   │   try:                                                           
  ❱  884 │   │   │   return_object = self._request_exec(                        
     885 │   │   │   │   session=session,                                       
     886 │   │   │   │   method=method,                                         
     887 │   │   │   │   full_url=full_url,                                     
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1193 in _request_exec                                                    
                                                                                
    1190 │   │   │   │   exception=err,                                         
    1191 │   │   │   │   stack_trace=traceback.format_exc(),                    
    1192 │   │   │   )                                                          
  ❱ 1193 │   │   │   raise err                                                  
    1194 │                                                                      
    1195 │   def make_requests_session(self) -> Session:                        
    1196 │   │   s = requests.Session()                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1104 in _request_exec                                                    
                                                                                
    1101 │   │   │   │   │   return ret                                         
    1102 │   │   │   │                                                          
    1103 │   │   │   │   if is_login_request(full_url) and raw_ret.status_code  
  ❱ 1104 │   │   │   │   │   raise ForbiddenError                               
    1105 │   │   │   │                                                          
    1106 │   │   │   │   elif is_retryable_http_code(raw_ret.status_code):      
    1107 │   │   │   │   │   err = get_http_retryable_error(raw_ret.status_cod  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: HTTP 403: Forbidden

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:118 in _connect                                           
                                                                                
    115 │   │   │   │   │   "See the [SnowflakeConnection configuration docume  
    116 │   │   │   │   │   "for more details and examples."                    
    117 │   │   │   │   )                                                       
  ❱ 118 │   │   │   raise e                                                     
    119 │                                                                       
    120 │   def query(                                                          
    121 │   │   self,                                                           
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:82 in _connect                                            
                                                                                
     79 │   │   │   st_secrets = self._secrets.to_dict()                        
     80 │   │   │   if len(st_secrets):                                         
     81 │   │   │   │   conn_kwargs = {**st_secrets, **kwargs}                  
  ❱  82 │   │   │   │   return snowflake.connector.connect(**conn_kwargs)       
     83 │   │   │                                                               
     84 │   │   │   # session.connector.connection.CONFIG_MANAGER is only avai  
     85 │   │   │   # versions of snowflake-connector-python.                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:442 in __init__                                                       
                                                                                
     439 │   │   │   # connection_name is None and kwargs was empty when calle  
     440 │   │   │   kwargs = _get_default_connection_params()                  
     441 │   │   self.__set_error_attributes()                                  
  ❱  442 │   │   self.connect(**kwargs)                                         
     443 │   │   self._telemetry = TelemetryClient(self._rest)                  
     444 │   │   self.expired = False                                           
     445                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:745 in connect                                                        
                                                                                
     742 │   │   │   │   if exceptions_dict:                                    
     743 │   │   │   │   │   raise Exception(str(exceptions_dict))              
     744 │   │   else:                                                          
  ❱  745 │   │   │   self.__open_connection()                                   
     746 │                                                                      
     747 │   def close(self, retry: bool = True) -> None:                       
     748 │   │   """Closes the connection."""                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1073 in __open_connection                                             
                                                                                
    1070 │   │   │   │   │   backoff_generator=self._backoff_generator,         
    1071 │   │   │   │   )                                                      
    1072 │   │   │                                                              
  ❱ 1073 │   │   │   self.authenticate_with_retry(self.auth_class)              
    1074 │   │   │                                                              
    1075 │   │   │   self._password = None  # ensure password won't persist     
    1076 │   │   │   self.auth_class.reset_secrets()                            
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1345 in authenticate_with_retry                                       
                                                                                
    1342 │   def authenticate_with_retry(self, auth_instance) -> None:          
    1343 │   │   # make some changes if needed before real __authenticate       
    1344 │   │   try:                                                           
  ❱ 1345 │   │   │   self._authenticate(auth_instance)                          
    1346 │   │   except ReauthenticationRequest as ex:                          
    1347 │   │   │   # cached id_token expiration error, we have cleaned id_to  
    1348 │   │   │   logger.debug("ID token expired. Reauthenticating...: %s",  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1373 in _authenticate                                                 
                                                                                
    1370 │   │   # record start time for computing timeout                      
    1371 │   │   auth_instance._retry_ctx.set_start_time()                      
    1372 │   │   try:                                                           
  ❱ 1373 │   │   │   auth.authenticate(                                         
    1374 │   │   │   │   auth_instance=auth_instance,                           
    1375 │   │   │   │   account=self.account,                                  
    1376 │   │   │   │   user=self.user,                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:258 in authenticate                                                   
                                                                                
    255 │   │   │   )                                                           
    256 │   │   except ForbiddenError as err:                                   
    257 │   │   │   # HTTP 403                                                  
  ❱ 258 │   │   │   raise err.__class__(                                        
    259 │   │   │   │   msg=(                                                   
    260 │   │   │   │   │   "Failed to connect to DB. "                         
    261 │   │   │   │   │   "Verify the account name is correct: {host}:{port}  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: 250001 (08001): Failed to connect to DB. Verify the account name
is correct: xxx.snowflakecomputing.com:443. HTTP 403: Forbidden
2024-05-08 16:05:06.741 503 GET /script-health-check (10.12.76.29) 212.88ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:250 in authenticate                                                   
                                                                                
    247 │   │   )                                                               
    248 │   │                                                                   
    249 │   │   try:                                                            
  ❱ 250 │   │   │   ret = self._rest._post_request(                             
    251 │   │   │   │   url,                                                    
    252 │   │   │   │   headers,                                                
    253 │   │   │   │   json.dumps(body),                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:734 in _post_request                                                     
                                                                                
     731 │   │   │   ret = probe_connection(full_url)                           
     732 │   │   │   pprint(ret)                                                
     733 │   │                                                                  
  ❱  734 │   │   ret = self.fetch(                                              
     735 │   │   │   "post",                                                    
     736 │   │   │   full_url,                                                  
     737 │   │   │   headers,                                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:843 in fetch                                                             
                                                                                
     840 │   │   │                                                              
     841 │   │   │   retry_ctx.set_start_time()                                 
     842 │   │   │   while True:                                                
  ❱  843 │   │   │   │   ret = self._request_exec_wrapper(                      
     844 │   │   │   │   │   session, method, full_url, headers, data, retry_c  
     845 │   │   │   │   )                                                      
     846 │   │   │   │   if ret is not None:                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:979 in _request_exec_wrapper                                             
                                                                                
     976 │   │   │   return None  # retry                                       
     977 │   │   except Exception as e:                                         
     978 │   │   │   if not no_retry:                                           
  ❱  979 │   │   │   │   raise e                                                
     980 │   │   │   logger.debug("Ignored error", exc_info=True)               
     981 │   │   │   return {}                                                  
     982                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:884 in _request_exec_wrapper                                             
                                                                                
     881 │   │   full_url = retry_ctx.add_retry_params(full_url)                
     882 │   │   full_url = SnowflakeRestful.add_request_guid(full_url)         
     883 │   │   try:                                                           
  ❱  884 │   │   │   return_object = self._request_exec(                        
     885 │   │   │   │   session=session,                                       
     886 │   │   │   │   method=method,                                         
     887 │   │   │   │   full_url=full_url,                                     
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1193 in _request_exec                                                    
                                                                                
    1190 │   │   │   │   exception=err,                                         
    1191 │   │   │   │   stack_trace=traceback.format_exc(),                    
    1192 │   │   │   )                                                          
  ❱ 1193 │   │   │   raise err                                                  
    1194 │                                                                      
    1195 │   def make_requests_session(self) -> Session:                        
    1196 │   │   s = requests.Session()                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1104 in _request_exec                                                    
                                                                                
    1101 │   │   │   │   │   return ret                                         
    1102 │   │   │   │                                                          
    1103 │   │   │   │   if is_login_request(full_url) and raw_ret.status_code  
  ❱ 1104 │   │   │   │   │   raise ForbiddenError                               
    1105 │   │   │   │                                                          
    1106 │   │   │   │   elif is_retryable_http_code(raw_ret.status_code):      
    1107 │   │   │   │   │   err = get_http_retryable_error(raw_ret.status_cod  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: HTTP 403: Forbidden

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:118 in _connect                                           
                                                                                
    115 │   │   │   │   │   "See the [SnowflakeConnection configuration docume  
    116 │   │   │   │   │   "for more details and examples."                    
    117 │   │   │   │   )                                                       
  ❱ 118 │   │   │   raise e                                                     
    119 │                                                                       
    120 │   def query(                                                          
    121 │   │   self,                                                           
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:82 in _connect                                            
                                                                                
     79 │   │   │   st_secrets = self._secrets.to_dict()                        
     80 │   │   │   if len(st_secrets):                                         
     81 │   │   │   │   conn_kwargs = {**st_secrets, **kwargs}                  
  ❱  82 │   │   │   │   return snowflake.connector.connect(**conn_kwargs)       
     83 │   │   │                                                               
     84 │   │   │   # session.connector.connection.CONFIG_MANAGER is only avai  
     85 │   │   │   # versions of snowflake-connector-python.                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:442 in __init__                                                       
                                                                                
     439 │   │   │   # connection_name is None and kwargs was empty when calle  
     440 │   │   │   kwargs = _get_default_connection_params()                  
     441 │   │   self.__set_error_attributes()                                  
  ❱  442 │   │   self.connect(**kwargs)                                         
     443 │   │   self._telemetry = TelemetryClient(self._rest)                  
     444 │   │   self.expired = False                                           
     445                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:745 in connect                                                        
                                                                                
     742 │   │   │   │   if exceptions_dict:                                    
     743 │   │   │   │   │   raise Exception(str(exceptions_dict))              
     744 │   │   else:                                                          
  ❱  745 │   │   │   self.__open_connection()                                   
     746 │                                                                      
     747 │   def close(self, retry: bool = True) -> None:                       
     748 │   │   """Closes the connection."""                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1073 in __open_connection                                             
                                                                                
    1070 │   │   │   │   │   backoff_generator=self._backoff_generator,         
    1071 │   │   │   │   )                                                      
    1072 │   │   │                                                              
  ❱ 1073 │   │   │   self.authenticate_with_retry(self.auth_class)              
    1074 │   │   │                                                              
    1075 │   │   │   self._password = None  # ensure password won't persist     
    1076 │   │   │   self.auth_class.reset_secrets()                            
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1345 in authenticate_with_retry                                       
                                                                                
    1342 │   def authenticate_with_retry(self, auth_instance) -> None:          
    1343 │   │   # make some changes if needed before real __authenticate       
    1344 │   │   try:                                                           
  ❱ 1345 │   │   │   self._authenticate(auth_instance)                          
    1346 │   │   except ReauthenticationRequest as ex:                          
    1347 │   │   │   # cached id_token expiration error, we have cleaned id_to  
    1348 │   │   │   logger.debug("ID token expired. Reauthenticating...: %s",  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1373 in _authenticate                                                 
                                                                                
    1370 │   │   # record start time for computing timeout                      
    1371 │   │   auth_instance._retry_ctx.set_start_time()                      
    1372 │   │   try:                                                           
  ❱ 1373 │   │   │   auth.authenticate(                                         
    1374 │   │   │   │   auth_instance=auth_instance,                           
    1375 │   │   │   │   account=self.account,                                  
    1376 │   │   │   │   user=self.user,                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:258 in authenticate                                                   
                                                                                
    255 │   │   │   )                                                           
    256 │   │   except ForbiddenError as err:                                   
    257 │   │   │   # HTTP 403                                                  
  ❱ 258 │   │   │   raise err.__class__(                                        
    259 │   │   │   │   msg=(                                                   
    260 │   │   │   │   │   "Failed to connect to DB. "                         
    261 │   │   │   │   │   "Verify the account name is correct: {host}:{port}  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: 250001 (08001): Failed to connect to DB. Verify the account name
is correct: xxx.snowflakecomputing.com:443. HTTP 403: Forbidden
2024-05-08 16:05:11.605 503 GET /script-health-check (10.12.76.29) 118.69ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:250 in authenticate                                                   
                                                                                
    247 │   │   )                                                               
    248 │   │                                                                   
    249 │   │   try:                                                            
  ❱ 250 │   │   │   ret = self._rest._post_request(                             
    251 │   │   │   │   url,                                                    
    252 │   │   │   │   headers,                                                
    253 │   │   │   │   json.dumps(body),                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:734 in _post_request                                                     
                                                                                
     731 │   │   │   ret = probe_connection(full_url)                           
     732 │   │   │   pprint(ret)                                                
     733 │   │                                                                  
  ❱  734 │   │   ret = self.fetch(                                              
     735 │   │   │   "post",                                                    
     736 │   │   │   full_url,                                                  
     737 │   │   │   headers,                                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:843 in fetch                                                             
                                                                                
     840 │   │   │                                                              
     841 │   │   │   retry_ctx.set_start_time()                                 
     842 │   │   │   while True:                                                
  ❱  843 │   │   │   │   ret = self._request_exec_wrapper(                      
     844 │   │   │   │   │   session, method, full_url, headers, data, retry_c  
     845 │   │   │   │   )                                                      
     846 │   │   │   │   if ret is not None:                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:979 in _request_exec_wrapper                                             
                                                                                
     976 │   │   │   return None  # retry                                       
     977 │   │   except Exception as e:                                         
     978 │   │   │   if not no_retry:                                           
  ❱  979 │   │   │   │   raise e                                                
     980 │   │   │   logger.debug("Ignored error", exc_info=True)               
     981 │   │   │   return {}                                                  
     982                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:884 in _request_exec_wrapper                                             
                                                                                
     881 │   │   full_url = retry_ctx.add_retry_params(full_url)                
     882 │   │   full_url = SnowflakeRestful.add_request_guid(full_url)         
     883 │   │   try:                                                           
  ❱  884 │   │   │   return_object = self._request_exec(                        
     885 │   │   │   │   session=session,                                       
     886 │   │   │   │   method=method,                                         
     887 │   │   │   │   full_url=full_url,                                     
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1193 in _request_exec                                                    
                                                                                
    1190 │   │   │   │   exception=err,                                         
    1191 │   │   │   │   stack_trace=traceback.format_exc(),                    
    1192 │   │   │   )                                                          
  ❱ 1193 │   │   │   raise err                                                  
    1194 │                                                                      
    1195 │   def make_requests_session(self) -> Session:                        
    1196 │   │   s = requests.Session()                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1104 in _request_exec                                                    
                                                                                
    1101 │   │   │   │   │   return ret                                         
    1102 │   │   │   │                                                          
    1103 │   │   │   │   if is_login_request(full_url) and raw_ret.status_code  
  ❱ 1104 │   │   │   │   │   raise ForbiddenError                               
    1105 │   │   │   │                                                          
    1106 │   │   │   │   elif is_retryable_http_code(raw_ret.status_code):      
    1107 │   │   │   │   │   err = get_http_retryable_error(raw_ret.status_cod  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: HTTP 403: Forbidden

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:118 in _connect                                           
                                                                                
    115 │   │   │   │   │   "See the [SnowflakeConnection configuration docume  
    116 │   │   │   │   │   "for more details and examples."                    
    117 │   │   │   │   )                                                       
  ❱ 118 │   │   │   raise e                                                     
    119 │                                                                       
    120 │   def query(                                                          
    121 │   │   self,                                                           
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:82 in _connect                                            
                                                                                
     79 │   │   │   st_secrets = self._secrets.to_dict()                        
     80 │   │   │   if len(st_secrets):                                         
     81 │   │   │   │   conn_kwargs = {**st_secrets, **kwargs}                  
  ❱  82 │   │   │   │   return snowflake.connector.connect(**conn_kwargs)       
     83 │   │   │                                                               
     84 │   │   │   # session.connector.connection.CONFIG_MANAGER is only avai  
     85 │   │   │   # versions of snowflake-connector-python.                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:442 in __init__                                                       
                                                                                
     439 │   │   │   # connection_name is None and kwargs was empty when calle  
     440 │   │   │   kwargs = _get_default_connection_params()                  
     441 │   │   self.__set_error_attributes()                                  
  ❱  442 │   │   self.connect(**kwargs)                                         
     443 │   │   self._telemetry = TelemetryClient(self._rest)                  
     444 │   │   self.expired = False                                           
     445                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:745 in connect                                                        
                                                                                
     742 │   │   │   │   if exceptions_dict:                                    
     743 │   │   │   │   │   raise Exception(str(exceptions_dict))              
     744 │   │   else:                                                          
  ❱  745 │   │   │   self.__open_connection()                                   
     746 │                                                                      
     747 │   def close(self, retry: bool = True) -> None:                       
     748 │   │   """Closes the connection."""                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1073 in __open_connection                                             
                                                                                
    1070 │   │   │   │   │   backoff_generator=self._backoff_generator,         
    1071 │   │   │   │   )                                                      
    1072 │   │   │                                                              
  ❱ 1073 │   │   │   self.authenticate_with_retry(self.auth_class)              
    1074 │   │   │                                                              
    1075 │   │   │   self._password = None  # ensure password won't persist     
    1076 │   │   │   self.auth_class.reset_secrets()                            
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1345 in authenticate_with_retry                                       
                                                                                
    1342 │   def authenticate_with_retry(self, auth_instance) -> None:          
    1343 │   │   # make some changes if needed before real __authenticate       
    1344 │   │   try:                                                           
  ❱ 1345 │   │   │   self._authenticate(auth_instance)                          
    1346 │   │   except ReauthenticationRequest as ex:                          
    1347 │   │   │   # cached id_token expiration error, we have cleaned id_to  
    1348 │   │   │   logger.debug("ID token expired. Reauthenticating...: %s",  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1373 in _authenticate                                                 
                                                                                
    1370 │   │   # record start time for computing timeout                      
    1371 │   │   auth_instance._retry_ctx.set_start_time()                      
    1372 │   │   try:                                                           
  ❱ 1373 │   │   │   auth.authenticate(                                         
    1374 │   │   │   │   auth_instance=auth_instance,                           
    1375 │   │   │   │   account=self.account,                                  
    1376 │   │   │   │   user=self.user,                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:258 in authenticate                                                   
                                                                                
    255 │   │   │   )                                                           
    256 │   │   except ForbiddenError as err:                                   
    257 │   │   │   # HTTP 403                                                  
  ❱ 258 │   │   │   raise err.__class__(                                        
    259 │   │   │   │   msg=(                                                   
    260 │   │   │   │   │   "Failed to connect to DB. "                         
    261 │   │   │   │   │   "Verify the account name is correct: {host}:{port}  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: 250001 (08001): Failed to connect to DB. Verify the account name
is correct: xxx.snowflakecomputing.com:443. HTTP 403: Forbidden
2024-05-08 16:05:17.747 503 GET /script-health-check (10.12.76.29) 1321.19ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:250 in authenticate                                                   
                                                                                
    247 │   │   )                                                               
    248 │   │                                                                   
    249 │   │   try:                                                            
  ❱ 250 │   │   │   ret = self._rest._post_request(                             
    251 │   │   │   │   url,                                                    
    252 │   │   │   │   headers,                                                
    253 │   │   │   │   json.dumps(body),                                       
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:734 in _post_request                                                     
                                                                                
     731 │   │   │   ret = probe_connection(full_url)                           
     732 │   │   │   pprint(ret)                                                
     733 │   │                                                                  
  ❱  734 │   │   ret = self.fetch(                                              
     735 │   │   │   "post",                                                    
     736 │   │   │   full_url,                                                  
     737 │   │   │   headers,                                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:843 in fetch                                                             
                                                                                
     840 │   │   │                                                              
     841 │   │   │   retry_ctx.set_start_time()                                 
     842 │   │   │   while True:                                                
  ❱  843 │   │   │   │   ret = self._request_exec_wrapper(                      
     844 │   │   │   │   │   session, method, full_url, headers, data, retry_c  
     845 │   │   │   │   )                                                      
     846 │   │   │   │   if ret is not None:                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:979 in _request_exec_wrapper                                             
                                                                                
     976 │   │   │   return None  # retry                                       
     977 │   │   except Exception as e:                                         
     978 │   │   │   if not no_retry:                                           
  ❱  979 │   │   │   │   raise e                                                
     980 │   │   │   logger.debug("Ignored error", exc_info=True)               
     981 │   │   │   return {}                                                  
     982                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:884 in _request_exec_wrapper                                             
                                                                                
     881 │   │   full_url = retry_ctx.add_retry_params(full_url)                
     882 │   │   full_url = SnowflakeRestful.add_request_guid(full_url)         
     883 │   │   try:                                                           
  ❱  884 │   │   │   return_object = self._request_exec(                        
     885 │   │   │   │   session=session,                                       
     886 │   │   │   │   method=method,                                         
     887 │   │   │   │   full_url=full_url,                                     
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1193 in _request_exec                                                    
                                                                                
    1190 │   │   │   │   exception=err,                                         
    1191 │   │   │   │   stack_trace=traceback.format_exc(),                    
    1192 │   │   │   )                                                          
  ❱ 1193 │   │   │   raise err                                                  
    1194 │                                                                      
    1195 │   def make_requests_session(self) -> Session:                        
    1196 │   │   s = requests.Session()                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/networ  
  k.py:1104 in _request_exec                                                    
                                                                                
    1101 │   │   │   │   │   return ret                                         
    1102 │   │   │   │                                                          
    1103 │   │   │   │   if is_login_request(full_url) and raw_ret.status_code  
  ❱ 1104 │   │   │   │   │   raise ForbiddenError                               
    1105 │   │   │   │                                                          
    1106 │   │   │   │   elif is_retryable_http_code(raw_ret.status_code):      
    1107 │   │   │   │   │   err = get_http_retryable_error(raw_ret.status_cod  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: HTTP 403: Forbidden

During handling of the above exception, another exception occurred:

────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:535 in _run_script                                      
                                                                                
  /mount/src/melanies_smoothies/streamlit_app.py:24 in <module>                 
                                                                                
    21 name_on_order = st.text_input("Name on Smoothie")                        
    22 st.write("The name on your smoothie will be ", name_on_order)            
    23                                                                          
  ❱ 24 cnx = st.connection("snowflake")                                         
    25 session = cnx.session()                                                  
    26 # session = get_active_session()                                         
    27 my_dataframe = session.table("smoothies.public.fruit_options").select(c  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:322 in connection_factory                                       
                                                                                
    319 │                                                                       
    320 │   # At this point, connection_class should be of type Type[Connectio  
    321 │   try:                                                                
  ❱ 322 │   │   conn = _create_connection(                                      
    323 │   │   │   name, connection_class, max_entries=max_entries, ttl=ttl,   
    324 │   │   )                                                               
    325 │   │   if isinstance(conn, SnowparkConnection):                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/metrics_  
  util.py:397 in wrapped_func                                                   
                                                                                
    394 │   │   │   │   # the telemetry never causes any issues.                
    395 │   │   │   │   _LOGGER.debug("Failed to collect command telemetry", e  
    396 │   │   try:                                                            
  ❱ 397 │   │   │   result = non_optional_func(*args, **kwargs)                 
    398 │   │   except RerunException as ex:                                    
    399 │   │   │   # Duplicated from below, because static analysis tools get  
    400 │   │   │   # by deferring the rethrow.                                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:104 in _create_connection                                       
                                                                                
    101 │   │   ttl=ttl,                                                        
    102 │   )(__create_connection)                                              
    103 │                                                                       
  ❱ 104 │   return __create_connection(name, connection_class, **kwargs)        
    105                                                                         
    106                                                                         
    107 def _get_first_party_connection(connection_class: str):                 
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:212 in wrapper                                                 
                                                                                
    209 │                                                                       
    210 │   @functools.wraps(info.func)                                         
    211 │   def wrapper(*args, **kwargs):                                       
  ❱ 212 │   │   return cached_func(*args, **kwargs)                             
    213 │                                                                       
    214 │   # Give our wrapper its `clear` function.                            
    215 │   # (This results in a spurious mypy error that we suppress.)         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:241 in __call__                                                
                                                                                
    238 │   │                                                                   
    239 │   │   if self._info.show_spinner or isinstance(self._info.show_spinn  
    240 │   │   │   with spinner(message, cache=True):                          
  ❱ 241 │   │   │   │   return self._get_or_create_cached_value(args, kwargs)   
    242 │   │   else:                                                           
    243 │   │   │   return self._get_or_create_cached_value(args, kwargs)       
    244                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:268 in _get_or_create_cached_value                             
                                                                                
    265 │   │   │   return self._handle_cache_hit(cached_result)                
    266 │   │   except CacheKeyNotFoundError:                                   
    267 │   │   │   pass                                                        
  ❱ 268 │   │   return self._handle_cache_miss(cache, value_key, func_args, fu  
    269 │                                                                       
    270 │   def _handle_cache_hit(self, result: CachedResult) -> Any:           
    271 │   │   """Handle a cache hit: replay the result's cached messages, an  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/caching/  
  cache_utils.py:324 in _handle_cache_miss                                      
                                                                                
    321 │   │   │   with self._info.cached_message_replay_ctx.calling_cached_f  
    322 │   │   │   │   self._info.func, self._info.allow_widgets               
    323 │   │   │   ):                                                          
  ❱ 324 │   │   │   │   computed_value = self._info.func(*func_args, **func_kw  
    325 │   │   │                                                               
    326 │   │   │   # We've computed our value, and now we need to write it ba  
    327 │   │   │   # along with any "replay messages" that were generated dur  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/runtime/connecti  
  on_factory.py:82 in __create_connection                                       
                                                                                
     79 │   def __create_connection(                                            
     80 │   │   name: str, connection_class: Type[ConnectionClass], **kwargs    
     81 │   ) -> ConnectionClass:                                               
  ❱  82 │   │   return connection_class(connection_name=name, **kwargs)         
     83 │                                                                       
     84 │   if not issubclass(connection_class, BaseConnection):                
     85 │   │   raise StreamlitAPIException(                                    
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/base  
  _connection.py:71 in __init__                                                 
                                                                                
     68 │   │   self._config_section_hash = calc_md5(json.dumps(self._secrets.  
     69 │   │   secrets_singleton.file_change_listener.connect(self._on_secret  
     70 │   │                                                                   
  ❱  71 │   │   self._raw_instance: Optional[RawConnectionT] = self._connect(*  
     72 │                                                                       
     73 │   def __del__(self) -> None:                                          
     74 │   │   secrets_singleton.file_change_listener.disconnect(self._on_sec  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:118 in _connect                                           
                                                                                
    115 │   │   │   │   │   "See the [SnowflakeConnection configuration docume  
    116 │   │   │   │   │   "for more details and examples."                    
    117 │   │   │   │   )                                                       
  ❱ 118 │   │   │   raise e                                                     
    119 │                                                                       
    120 │   def query(                                                          
    121 │   │   self,                                                           
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/streamlit/connections/snow  
  flake_connection.py:82 in _connect                                            
                                                                                
     79 │   │   │   st_secrets = self._secrets.to_dict()                        
     80 │   │   │   if len(st_secrets):                                         
     81 │   │   │   │   conn_kwargs = {**st_secrets, **kwargs}                  
  ❱  82 │   │   │   │   return snowflake.connector.connect(**conn_kwargs)       
     83 │   │   │                                                               
     84 │   │   │   # session.connector.connection.CONFIG_MANAGER is only avai  
     85 │   │   │   # versions of snowflake-connector-python.                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/__init  
  __.py:55 in Connect                                                           
                                                                                
    52                                                                          
    53 @wraps(SnowflakeConnection.__init__)                                     
    54 def Connect(**kwargs) -> SnowflakeConnection:                            
  ❱ 55 │   return SnowflakeConnection(**kwargs)                                 
    56                                                                          
    57                                                                          
    58 connect = Connect                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:442 in __init__                                                       
                                                                                
     439 │   │   │   # connection_name is None and kwargs was empty when calle  
     440 │   │   │   kwargs = _get_default_connection_params()                  
     441 │   │   self.__set_error_attributes()                                  
  ❱  442 │   │   self.connect(**kwargs)                                         
     443 │   │   self._telemetry = TelemetryClient(self._rest)                  
     444 │   │   self.expired = False                                           
     445                                                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:745 in connect                                                        
                                                                                
     742 │   │   │   │   if exceptions_dict:                                    
     743 │   │   │   │   │   raise Exception(str(exceptions_dict))              
     744 │   │   else:                                                          
  ❱  745 │   │   │   self.__open_connection()                                   
     746 │                                                                      
     747 │   def close(self, retry: bool = True) -> None:                       
     748 │   │   """Closes the connection."""                                   
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1073 in __open_connection                                             
                                                                                
    1070 │   │   │   │   │   backoff_generator=self._backoff_generator,         
    1071 │   │   │   │   )                                                      
    1072 │   │   │                                                              
  ❱ 1073 │   │   │   self.authenticate_with_retry(self.auth_class)              
    1074 │   │   │                                                              
    1075 │   │   │   self._password = None  # ensure password won't persist     
    1076 │   │   │   self.auth_class.reset_secrets()                            
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1345 in authenticate_with_retry                                       
                                                                                
    1342 │   def authenticate_with_retry(self, auth_instance) -> None:          
    1343 │   │   # make some changes if needed before real __authenticate       
    1344 │   │   try:                                                           
  ❱ 1345 │   │   │   self._authenticate(auth_instance)                          
    1346 │   │   except ReauthenticationRequest as ex:                          
    1347 │   │   │   # cached id_token expiration error, we have cleaned id_to  
    1348 │   │   │   logger.debug("ID token expired. Reauthenticating...: %s",  
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/connec  
  tion.py:1373 in _authenticate                                                 
                                                                                
    1370 │   │   # record start time for computing timeout                      
    1371 │   │   auth_instance._retry_ctx.set_start_time()                      
    1372 │   │   try:                                                           
  ❱ 1373 │   │   │   auth.authenticate(                                         
    1374 │   │   │   │   auth_instance=auth_instance,                           
    1375 │   │   │   │   account=self.account,                                  
    1376 │   │   │   │   user=self.user,                                        
                                                                                
  /home/adminuser/venv/lib/python3.11/site-packages/snowflake/connector/auth/_  
  auth.py:258 in authenticate                                                   
                                                                                
    255 │   │   │   )                                                           
    256 │   │   except ForbiddenError as err:                                   
    257 │   │   │   # HTTP 403                                                  
  ❱ 258 │   │   │   raise err.__class__(                                        
    259 │   │   │   │   msg=(                                                   
    260 │   │   │   │   │   "Failed to connect to DB. "                         
    261 │   │   │   │   │   "Verify the account name is correct: {host}:{port}  
────────────────────────────────────────────────────────────────────────────────
ForbiddenError: 250001 (08001): Failed to connect to DB. Verify the account name
is correct: xxx.snowflakecomputing.com:443. HTTP 403: Forbidden
[16:22:09] 🐙 Pulling code changes from Github...
[16:22:10] 📦 Processing dependencies...

──────────────────────────────────────── uv ───────────────────────────────────────────

Using uv pip install.
Resolved [2024-05-08 16:22:11.092945] 61 packages[2024-05-08 16:22:11.093232]  in 172ms[2024-05-08 16:22:11.093570] 
Audited 61 packages in 0.14ms
Checking if Streamlit is installed
Found Streamlit version 1.31.1 in the environment

────────────────────────────────────────────────────────────────────────────────────────

[16:22:13] 🐍 Python dependencies were installed from /mount/src/melanies_smoothies/requirements.txt using uv.
[16:22:13] 📦 Processed dependencies!



[16:22:16] 🔄 Updated app!
[16:24:33] 🐙 Pulling code changes from Github...
[16:24:34] 📦 Processing dependencies...
[16:24:34] 📦 Processed dependencies!
[16:24:36] 🔄 Updated app!
[16:28:13] 🐙 Pulling code changes from Github...
[16:28:14] 📦 Processing dependencies...
[16:28:14] 📦 Processed dependencies!
[16:28:16] 🔄 Updated app!
[16:54:06] 🐙 Pulling code changes from Github...
[16:54:07] 📦 Processing dependencies...
[16:54:07] 📦 Processed dependencies!
[16:54:08] 🔄 Updated app!
[17:02:57] 🐙 Pulling code changes from Github...
[17:02:58] 📦 Processing dependencies...
[17:02:58] 📦 Processed dependencies!
[17:02:59] 🔄 Updated app!
[17:03:45] 🐙 Pulling code changes from Github...
[17:03:46] 📦 Processing dependencies...
[17:03:46] 📦 Processed dependencies!
[17:03:48] 🔄 Updated app!
[17:09:11] 🐙 Pulling code changes from Github...
[17:09:12] 📦 Processing dependencies...
[17:09:12] 📦 Processed dependencies!
[17:09:14] 🔄 Updated app!